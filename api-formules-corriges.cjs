const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * üî• VERSION CORRIG√âE - R√©cup√©rer les formules TreeBranchLeaf
 */

async function getTreeBranchLeafFormulasSimple(nodeId) {
  try {
    console.log(`üîç R√©cup√©ration des formules pour le n≈ìud: ${nodeId}`);
    
    // Version simplifi√©e sans relations complexes
    const formulas = await prisma.treeBranchLeafNodeFormula.findMany({
      where: { nodeId },
      orderBy: { order: 'asc' }
    });
    
    console.log(`‚úÖ ${formulas.length} formule(s) trouv√©e(s)`);
    
    // Si on a des formules, r√©cup√©rer les infos du n≈ìud s√©par√©ment
    if (formulas.length > 0) {
      const node = await prisma.treeBranchLeafNode.findUnique({
        where: { id: nodeId },
        select: { 
          id: true,
          label: true, 
          type: true, 
          subType: true,
          treeId: true
        }
      });
      
      const tree = node ? await prisma.treeBranchLeafTree.findUnique({
        where: { id: node.treeId },
        select: { name: true, organizationId: true }
      }) : null;
      
      return formulas.map(formula => ({
        ...formula,
        nodeInfo: {
          label: node?.label,
          type: node?.type,
          subType: node?.subType,
          treeId: node?.treeId,
          treeName: tree?.name
        }
      }));
    }
    
    return formulas;
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration formules:', error.message);
    return [];
  }
}

async function getAllTreeBranchLeafFormulasSimple() {
  try {
    console.log('üåç R√©cup√©ration de TOUTES les formules TreeBranchLeaf...');
    
    // R√©cup√©rer toutes les formules
    const allFormulas = await prisma.treeBranchLeafNodeFormula.findMany({
      orderBy: { createdAt: 'desc' }
    });
    
    console.log(`‚úÖ ${allFormulas.length} formules trouv√©es au total`);
    
    // R√©cup√©rer les infos des n≈ìuds et arbres pour chaque formule
    const enrichedFormulas = [];
    
    for (const formula of allFormulas) {
      const node = await prisma.treeBranchLeafNode.findUnique({
        where: { id: formula.nodeId },
        select: { 
          id: true,
          label: true, 
          type: true,
          treeId: true
        }
      });
      
      const tree = node ? await prisma.treeBranchLeafTree.findUnique({
        where: { id: node.treeId },
        select: { name: true, organizationId: true }
      }) : null;
      
      enrichedFormulas.push({
        ...formula,
        nodeLabel: node?.label || 'N≈ìud inconnu',
        nodeType: node?.type || 'unknown',
        treeName: tree?.name || 'Arbre inconnu',
        treeId: node?.treeId,
        organizationId: tree?.organizationId
      });
    }
    
    return enrichedFormulas;
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration toutes les formules:', error.message);
    return [];
  }
}

/**
 * üßÆ Analyser une formule (tokens ‚Üí lisible)
 */
function analyzeFormula(tokens) {
  if (!Array.isArray(tokens)) return 'Formule invalide';
  
  return tokens.map(token => {
    if (typeof token === 'string') {
      if (token.startsWith('@value.')) {
        return `[Champ: ${token.replace('@value.', '')}]`;
      } else if (['+', '-', '*', '/', '(', ')'].includes(token)) {
        return `[Op√©rateur: ${token}]`;
      } else if (!isNaN(parseFloat(token))) {
        return `[Nombre: ${token}]`;
      }
    }
    return `[Token: ${token}]`;
  }).join(' ');
}

/**
 * üîÑ API REST compatible - comme dans le vrai syst√®me
 */
async function getNodeFormulasAPI(nodeId) {
  try {
    const formulas = await prisma.treeBranchLeafNodeFormula.findMany({
      where: { nodeId },
      orderBy: { order: 'asc' }
    });
    
    return formulas.map(f => ({
      id: f.id,
      name: f.name,
      tokens: f.tokens,
      description: f.description,
      isDefault: f.isDefault,
      order: f.order
    }));
  } catch (error) {
    console.error('‚ùå Erreur API formules:', error.message);
    return [];
  }
}

// üöÄ TEST PRATIQUE CORRIG√â
async function testRecuperationFormulesCorriges() {
  console.log('üöÄ TEST CORRIG√â - R√©cup√©ration formules TreeBranchLeaf');
  console.log('====================================================');
  
  // Test 1: Trouver un n≈ìud avec des formules
  console.log('üîç 1. Recherche de n≈ìuds avec formules...');
  
  const anyFormula = await prisma.treeBranchLeafNodeFormula.findFirst();
  if (!anyFormula) {
    console.log('‚ùå Aucune formule trouv√©e en base');
    return;
  }
  
  const nodeId = anyFormula.nodeId;
  console.log(`‚úÖ N≈ìud trouv√© avec formule: ${nodeId}`);
  
  // Test 2: R√©cup√©ration simple
  console.log(`\n2Ô∏è‚É£ Test: Formules du n≈ìud ${nodeId}`);
  const formulas = await getTreeBranchLeafFormulasSimple(nodeId);
  
  formulas.forEach(formula => {
    console.log(`\nüìã Formule: "${formula.name}"`);
    console.log(`   üÜî ID: ${formula.id}`);
    console.log(`   üìù Description: ${formula.description || 'Aucune'}`);
    console.log(`   üßÆ Tokens: ${JSON.stringify(formula.tokens)}`);
    console.log(`   üìñ Lisible: ${analyzeFormula(formula.tokens)}`);
    if (formula.nodeInfo) {
      console.log(`   üå≥ N≈ìud: "${formula.nodeInfo.label}" (${formula.nodeInfo.type})`);
      console.log(`   üèóÔ∏è Arbre: "${formula.nodeInfo.treeName}"`);
    }
  });
  
  // Test 3: API REST simul√©e
  console.log(`\n3Ô∏è‚É£ Test: API REST /api/treebranchleaf/nodes/${nodeId}/formulas`);
  const apiFormulas = await getNodeFormulasAPI(nodeId);
  console.log('‚úÖ R√©ponse API (format JSON):');
  console.log(JSON.stringify(apiFormulas, null, 2));
  
  // Test 4: Toutes les formules
  console.log(`\n4Ô∏è‚É£ Test: Toutes les formules`);
  const allFormulas = await getAllTreeBranchLeafFormulasSimple();
  
  console.log(`üìä Total: ${allFormulas.length} formules`);
  allFormulas.forEach((formula, index) => {
    console.log(`${index + 1}. "${formula.name}" ‚Üí N≈ìud "${formula.nodeLabel}" (Arbre: ${formula.treeName})`);
  });
  
  await prisma.$disconnect();
}

// üìù R√âSUM√â POUR TON MODULE
console.log(`
üéØ R√âSUM√â POUR TON MODULE FORMULE
===============================

‚úÖ Pour r√©cup√©rer les formules d'un n≈ìud TreeBranchLeaf:

1. Via API REST (recommand√©):
   GET /api/treebranchleaf/nodes/{nodeId}/formulas

2. Via Prisma directement:
   await prisma.treeBranchLeafNodeFormula.findMany({
     where: { nodeId: 'ton-node-id' },
     orderBy: { order: 'asc' }
   });

3. Chaque formule contient:
   - id: identifiant unique
   - name: nom de la formule
   - tokens: array des √©l√©ments de la formule
   - description: description optionnelle
   - nodeId: ID du n≈ìud propri√©taire

4. Les tokens sont la logique de la formule:
   ["@value.field1", "+", "@value.field2", "*", "1.21"]
   
   @value.xxx = r√©f√©rence √† un champ
   +, -, *, / = op√©rateurs math√©matiques
   nombres = constantes

üìã Table: TreeBranchLeafNodeFormula
üîó API: /api/treebranchleaf/nodes/:nodeId/formulas
`);

module.exports = {
  getTreeBranchLeafFormulasSimple,
  getAllTreeBranchLeafFormulasSimple,
  getNodeFormulasAPI,
  analyzeFormula
};

if (require.main === module) {
  testRecuperationFormulesCorriges();
}
