const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function repairDatabase() {
  console.log('üîß R√âPARATION BASE DE DONN√âES - DONN√âES CRITIQUES MANQUANTES');
  console.log('='.repeat(70));

  try {
    // 1. V√©rifier/Cr√©er l'organisation 2thier
    console.log('üè¢ V√©rification organisation 2thier...');
    
    let organization = await prisma.organization.findFirst({
      where: { name: '2thier' }
    });

    if (!organization) {
      console.log('‚ùå Organisation 2thier manquante - Cr√©ation...');
      organization = await prisma.organization.create({
        data: {
          name: '2thier',
          website: 'https://2thier.be',
          description: 'Organisation principale 2thier',
          status: 'active',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      console.log('‚úÖ Organisation 2thier cr√©√©e:', organization.id);
    } else {
      console.log('‚úÖ Organisation 2thier trouv√©e:', organization.id);
    }

    // 2. Cr√©er le r√¥le SUPER_ADMIN s'il n'existe pas
    console.log('\nüé≠ V√©rification r√¥le SUPER_ADMIN...');
    
    let superAdminRole = await prisma.role.findFirst({
      where: { 
        name: 'SUPER_ADMIN',
        organizationId: organization.id 
      }
    });

    if (!superAdminRole) {
      console.log('‚ùå R√¥le SUPER_ADMIN manquant - Cr√©ation...');
      superAdminRole = await prisma.role.create({
        data: {
          name: 'SUPER_ADMIN',
          label: 'Super Administrateur',
          organizationId: organization.id,
          description: 'Super Administrateur',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      console.log('‚úÖ R√¥le SUPER_ADMIN cr√©√©:', superAdminRole.id);
    } else {
      console.log('‚úÖ R√¥le SUPER_ADMIN trouv√©:', superAdminRole.id);
    }

    // 3. V√©rifier/Cr√©er le Super Admin
    console.log('\nüë§ V√©rification utilisateur Super Admin...');
    
    let superAdmin = await prisma.user.findFirst({
      where: { email: 'jonathan.dethier@2thier.be' }
    });

    if (!superAdmin) {
      console.log('‚ùå Super Admin manquant - Cr√©ation...');
      const hashedPassword = await bcrypt.hash('Jlsl2022@', 10);
      
      superAdmin = await prisma.user.create({
        data: {
          email: 'jonathan.dethier@2thier.be',
          passwordHash: hashedPassword,
          firstName: 'Jonathan',
          lastName: 'Dethier',
          status: 'active',
          role: 'super_admin',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      console.log('‚úÖ Super Admin cr√©√©:', superAdmin.id);
    } else {
      console.log('‚úÖ Super Admin trouv√©:', superAdmin.id);
    }

    // 4. V√©rifier/Cr√©er la relation UserOrganization
    console.log('\nüîó V√©rification relation UserOrganization...');
    
    let userOrg = await prisma.userOrganization.findFirst({
      where: {
        userId: superAdmin.id,
        organizationId: organization.id
      }
    });

    if (!userOrg) {
      console.log('‚ùå Relation UserOrganization manquante - Cr√©ation...');
      userOrg = await prisma.userOrganization.create({
        data: {
          userId: superAdmin.id,
          organizationId: organization.id,
          roleId: superAdminRole.id,
          status: 'ACTIVE',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      console.log('‚úÖ Relation UserOrganization cr√©√©e');
    } else {
      console.log('‚úÖ Relation UserOrganization trouv√©e');
    }

    // 5. Les modules seront activ√©s automatiquement par le syst√®me
    console.log('\nüì¶ Les modules seront activ√©s automatiquement...');

    // 6. R√©sum√© final
    console.log('\nüìä R√âSUM√â R√âPARATION:');
    console.log(`   üè¢ Organisation: ${organization.name} (ID: ${organization.id})`);
    console.log(`   üë§ Super Admin: ${superAdmin.email}`);
    console.log(`   üé≠ R√¥le: ${superAdminRole.name}`);
    console.log(`   üîó UserOrganization: Li√©e`);
    console.log(`   üì¶ Modules: Seront activ√©s automatiquement`);
    
    console.log('\nüéØ ACTIONS SUIVANTES:');
    console.log('   1. ‚úÖ Red√©marrer le serveur (npm run dev)');
    console.log('   2. ‚úÖ Se connecter avec jonathan.dethier@2thier.be');
    console.log('   3. ‚úÖ Tester la connexion Google OAuth');

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©paration:', error);
  } finally {
    await prisma.$disconnect();
  }
}

repairDatabase();
