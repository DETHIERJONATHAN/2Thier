const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function verifierNodeClients() {
  try {
    const clientNodeId = 'node_1757366229470_wbzl3mi60'; // N≈ìud Clients
    
    console.log('üîç V√©rification compl√®te du n≈ìud Clients...');
    console.log(`Node ID: ${clientNodeId}`);
    
    // 1. R√©cup√©rer les d√©tails du n≈ìud
    const node = await prisma.treeBranchLeafNode.findUnique({
      where: { id: clientNodeId },
      select: {
        id: true,
        label: true,
        type: true,
        subType: true,
        hasFormula: true,
        formulaConfig: true,
        metadata: true
      }
    });
    
    if (!node) {
      console.log('‚ùå N≈ìud Clients non trouv√© !');
      return;
    }
    
    console.log('\nüìä D√âTAILS DU N≈íUD CLIENTS:');
    console.log(`   Label: ${node.label}`);
    console.log(`   Type: ${node.type} / ${node.subType}`);
    console.log(`   hasFormula: ${node.hasFormula}`);
    console.log(`   formulaConfig: ${node.formulaConfig ? 'OUI' : 'NON'}`);
    console.log(`   metadata: ${node.metadata ? 'OUI' : 'NON'}`);
    
    if (node.formulaConfig) {
      console.log(`   üìù formulaConfig contenu: ${JSON.stringify(node.formulaConfig, null, 2)}`);
    }
    
    if (node.metadata) {
      console.log(`   üìù metadata contenu: ${JSON.stringify(node.metadata, null, 2)}`);
    }
    
    // 2. V√©rifier les formules dans la table d√©di√©e
    const formulas = await prisma.treeBranchLeafNodeFormula.findMany({
      where: { nodeId: clientNodeId }
    });
    
    console.log(`\nüßÆ FORMULES DANS LA TABLE D√âDI√âE: ${formulas.length}`);
    formulas.forEach((formula, index) => {
      console.log(`   ${index + 1}. "${formula.name}"`);
      console.log(`      ID: ${formula.id}`);
      console.log(`      Tokens: ${JSON.stringify(formula.tokens)}`);
      console.log(`      Ordre: ${formula.order}`);
      console.log(`      Par d√©faut: ${formula.isDefault}`);
    });
    
    // 3. Test de l'API pour ce n≈ìud
    console.log('\nüåê TEST API:');
    console.log(`   Endpoint: /api/treebranchleaf/nodes/${clientNodeId}/formulas`);
    console.log(`   ‚Üí Devrait retourner ${formulas.length} formule(s)`);
    
    // 4. Probl√®me potentiel - v√©rifier si hasFormula est √† jour
    if (formulas.length > 0 && !node.hasFormula) {
      console.log('\n‚ö†Ô∏è PROBL√àME D√âTECT√â:');
      console.log('   Des formules existent en table mais hasFormula = false');
      console.log('   ‚Üí Le frontend ne peut pas d√©tecter les formules');
      console.log('   ‚Üí Solution: mettre √† jour hasFormula = true');
      
      // Corriger automatiquement
      await prisma.treeBranchLeafNode.update({
        where: { id: clientNodeId },
        data: { hasFormula: true }
      });
      
      console.log('   ‚úÖ hasFormula mis √† jour √† true');
    }
    
    // 5. V√©rifier les capacit√©s dans metadata
    if (node.metadata && typeof node.metadata === 'object') {
      const capabilities = node.metadata.capabilities;
      if (capabilities) {
        console.log('\nüéØ CAPACIT√âS DANS METADATA:');
        Object.keys(capabilities).forEach(cap => {
          console.log(`   ${cap}: ${capabilities[cap] ? 'ACTIV√â' : 'D√âSACTIV√â'}`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

verifierNodeClients();
