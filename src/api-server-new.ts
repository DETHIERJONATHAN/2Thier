/**
 * üöÄ SERVEUR API CRM - ARCHITECTURE MODULAIRE PROPRE
 * 
 * Ce serveur utilise une architecture modulaire o√π chaque domaine m√©tier
 * est g√©r√© par son propre router sp√©cialis√©.
 */

import express, { Request, Response } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import { PrismaClient } from '@prisma/client';
import { createServer } from 'http';

/**
 * üîß CONFIGURATION ET INSTANCES
 */
const app = express();
const PORT = process.env.PORT || 4000;
const prisma = new PrismaClient();
const server = createServer(app);

/**
 * üõ°Ô∏è MIDDLEWARE DE S√âCURIT√â ET CONFIGURATION
 */
app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginEmbedderPolicy: false
}));

app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:3000'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

/**
 * üîÑ MIDDLEWARE DE LOGGING
 */
app.use((req, res, next) => {
  console.log(`üì° ${req.method} ${req.path}`);
  next();
});

/**
 * üè• ROUTE DE SANT√â
 */
app.get('/health', (req: Request, res: Response) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    architecture: 'Modular CRM API v2.0'
  });
});

/**
 * üìä ROUTE DE TEST API
 */
app.get('/api/test', (req: Request, res: Response) => {
  res.json({
    message: 'API CRM fonctionnelle !',
    timestamp: new Date().toISOString(),
    architecture: 'Routes modulaires activ√©es ‚úÖ'
  });
});

/**
 * üì• IMPORTATION DES ROUTES MODULAIRES
 */
import authRoutes from './routes/auth';
import organizationsRoutes from './routes/organizations';
import usersRoutes from './routes/users';
import modulesRoutes from './routes/modules';
import rolesRoutes from './routes/roles';
import permissionsRoutes from './routes/permissions';
import adminRoutes from './routes/admin';
import notificationsRoutes from './routes/notifications';
import blocksRoutes from './routes/blocks';

/**
 * üîó D√âL√âGATION AUX ROUTES SP√âCIALIS√âES
 * Chaque domaine m√©tier est g√©r√© par son propre fichier de routes
 */
console.log('üîó Configuration des routes modulaires...');

// üîê AUTHENTIFICATION - Routes d'auth avec session et s√©curit√©
app.use('/api/auth', authRoutes);
app.use('/', authRoutes); // Compatibilit√© pour /login direct

// üè¢ ORGANISATIONS - Gestion compl√®te des organisations avec permissions
app.use('/api/organizations', organizationsRoutes);

// üë• UTILISATEURS - CRUD utilisateurs avec relations organisations
app.use('/api/users', usersRoutes);

// üìã MODULES - Gestion des modules syst√®me et organisation
app.use('/api/modules', modulesRoutes);

// üé≠ R√îLES - Syst√®me de r√¥les hi√©rarchiques
app.use('/api/roles', rolesRoutes);

// üîê PERMISSIONS - Gestion fine des permissions
app.use('/api/permissions', permissionsRoutes);

// üîß ADMIN - Fonctionnalit√©s d'administration avanc√©es
app.use('/api/admin', adminRoutes);

// üìß NOTIFICATIONS - Syst√®me de notifications intelligent
app.use('/api/notifications', notificationsRoutes);

// üìù BLOCKS/FORMULAIRES - Gestion des blocs et formulaires dynamiques
app.use('/api/blocks', blocksRoutes);

console.log('‚úÖ Routes modulaires configur√©es');

/**
 * üöÄ D√âMARRAGE DU SERVEUR
 */
async function startServer() {
  try {
    console.log('üåü D√©marrage du serveur CRM...');
    
    // 1. Test connexion base de donn√©es
    console.log('üîó Test connexion base de donn√©es...');
    await prisma.$connect();
    console.log('‚úÖ Base de donn√©es connect√©e');

    // 2. D√©marrer le serveur
    server.listen(PORT, () => {
      console.log('üöÄ ================================');
      console.log(`üåü SERVEUR CRM D√âMARR√â SUR PORT ${PORT}`);
      console.log('üöÄ ================================');
      console.log(`üì± Frontend: http://localhost:5173`);
      console.log(`üîó API: http://localhost:${PORT}`);
      console.log(`üè• Health: http://localhost:${PORT}/health`);
      console.log('üöÄ ================================');
      console.log('‚úÖ Serveur pr√™t √† recevoir les requ√™tes !');
      console.log('üîó Architecture: Routes modulaires activ√©es');
    });

  } catch (error) {
    console.error('‚ùå ERREUR CRITIQUE d√©marrage serveur:', error);
    process.exit(1);
  }
}

/**
 * üõë GESTION PROPRE DE L'ARR√äT
 */
process.on('SIGTERM', async () => {
  console.log('üõë Arr√™t gracieux du serveur...');
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë Arr√™t forc√© du serveur...');
  await prisma.$disconnect();
  process.exit(0);
});

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason) => {
  console.error('‚ùå Rejection non g√©r√©e:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// D√©marrer le serveur
startServer();
