import type { FieldValidation } from "../../../../../../../store/slices/types";

// Interface pour le r√©sultat de validation
interface ValidationResult {
  isValid: boolean;
  message: string;
  details?: any;
}

/**
 * Valide une validation avant toute manipulation API.
 * @param validation La validation √† v√©rifier
 * @param origin Le composant d'origine de l'appel (pour le debug)
 */
export function validateValidation(validation: FieldValidation, origin: string = 'unknown'): ValidationResult {
  console.log(`[ValidationValidator:${origin}] üîç Validation de l'objet validation ${validation?.id}`);

  // V√©rification de base
  if (!validation) {
    console.error(`[ValidationValidator:${origin}] ‚ùå Validation ind√©finie`);
    return { isValid: false, message: "Validation ind√©finie" };
  }

  // V√©rification de l'ID
  if (!validation.id) {
    console.error(`[ValidationValidator:${origin}] ‚ùå ID de validation manquant`);
    return { isValid: false, message: "ID de validation manquant" };
  }

  // V√©rification de la s√©quence
  if (!validation.sequence) {
    console.warn(`[ValidationValidator:${origin}] ‚ö†Ô∏è S√©quence de validation manquante pour ${validation.id}`);
    // Une s√©quence manquante n'est pas fatale, on peut en cr√©er une par d√©faut
    return { 
      isValid: true,
      message: "S√©quence de validation manquante, une s√©quence par d√©faut sera cr√©√©e" 
    };
  }

  // V√©rification des s√©quences validationSequence et comparisonSequence
  const { validationSequence, comparisonSequence } = validation.sequence;
  
  if (!Array.isArray(validationSequence)) {
    console.error(`[ValidationValidator:${origin}] ‚ùå validationSequence n'est pas un tableau dans ${validation.id}`);
    return { 
      isValid: false, 
      message: "Format de s√©quence de validation invalide", 
      details: { validationSequence }
    };
  }

  if (!Array.isArray(comparisonSequence)) {
    console.error(`[ValidationValidator:${origin}] ‚ùå comparisonSequence n'est pas un tableau dans ${validation.id}`);
    return { 
      isValid: false, 
      message: "Format de s√©quence de comparaison invalide", 
      details: { comparisonSequence }
    };
  }

  // V√©rification des √©l√©ments des s√©quences
  for (const item of [...validationSequence, ...comparisonSequence]) {
    if (!item.type) {
      console.error(`[ValidationValidator:${origin}] ‚ùå √âl√©ment de s√©quence sans type dans ${validation.id}`, item);
      return { 
        isValid: false, 
        message: "√âl√©ment de s√©quence invalide (type manquant)", 
        details: item 
      };
    }
    
    if (item.type === 'field' && !item.id) {
      console.error(`[ValidationValidator:${origin}] ‚ùå Champ sans ID dans la s√©quence de ${validation.id}`, item);
      return { 
        isValid: false, 
        message: "Champ invalide dans la s√©quence (ID manquant)", 
        details: item 
      };
    }
    
    if (item.type === 'operator' && !item.value) {
      console.error(`[ValidationValidator:${origin}] ‚ùå Op√©rateur sans valeur dans la s√©quence de ${validation.id}`, item);
      return { 
        isValid: false, 
        message: "Op√©rateur invalide dans la s√©quence (valeur manquante)", 
        details: item 
      };
    }
  }

  // V√©rification du message d'erreur
  if (!validation.errorMessage) {
    console.warn(`[ValidationValidator:${origin}] ‚ö†Ô∏è Message d'erreur manquant pour ${validation.id}`);
    // Un message manquant n'est pas fatal, on peut utiliser un message par d√©faut
  }

  console.log(`[ValidationValidator:${origin}] ‚úÖ Validation ${validation.id} est valide`);
  return { isValid: true, message: "Validation valide" };
}

/**
 * Pr√©pare une validation pour l'envoi √† l'API.
 * @param validation La validation √† pr√©parer
 */
export function prepareValidationForAPI(validation: FieldValidation): any {
  console.log(`[ValidationValidator] üîß Pr√©paration de la validation ${validation.id} pour l'API`);
  
  // Cr√©ation d'une copie pour ne pas modifier l'original
  const prepared = {
    id: validation.id,
    name: validation.name || "Validation sans nom",
    sequence: validation.sequence || { validationSequence: [], comparisonSequence: [] },
    errorMessage: validation.errorMessage || "Valeur invalide",
    fieldId: validation.fieldId
  };

  console.log(`[ValidationValidator] ‚úÖ Validation ${validation.id} pr√™te pour l'API`, prepared);
  return prepared;
}

/**
 * R√©cup√®re les en-t√™tes standard pour les appels API.
 */
export function getAPIHeaders(): HeadersInit {
  return {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };
}

/**
 * √âvalue une r√®gle de validation avec des valeurs r√©elles.
 * @param validation La validation √† √©valuer
 * @param values Les valeurs √† utiliser pour l'√©valuation
 */
export function evaluateValidation(validation: FieldValidation, values: Record<string, any>): { isValid: boolean; error?: string; details?: any } {
  console.log(`[ValidationEvaluator] üß™ √âvaluation de la validation ${validation.id}`, values);
  
  if (!validation.sequence) {
    console.warn(`[ValidationEvaluator] ‚ö†Ô∏è Pas de s√©quence √† √©valuer pour ${validation.id}`);
    return { isValid: true };
  }
  
  try {
    // Construction de l'expression √† partir des s√©quences
    const { validationSequence, comparisonSequence } = validation.sequence;
    
    // Conversion des s√©quences en expressions
    let validationExpr = '';
    let comparisonExpr = '';
    
    // Traitement de la s√©quence de validation
    for (const item of validationSequence) {
      if (item.type === 'field') {
        const value = values[item.id] ?? null;
        validationExpr += typeof value === 'string' ? `"${value}"` : value;
      } else if (item.type === 'operator') {
        validationExpr += ` ${item.value} `;
      } else if (item.type === 'value') {
        validationExpr += typeof item.value === 'string' ? `"${item.value}"` : item.value;
      }
    }
    
    // Traitement de la s√©quence de comparaison
    for (const item of comparisonSequence) {
      if (item.type === 'field') {
        const value = values[item.id] ?? null;
        comparisonExpr += typeof value === 'string' ? `"${value}"` : value;
      } else if (item.type === 'operator') {
        comparisonExpr += ` ${item.value} `;
      } else if (item.type === 'value') {
        comparisonExpr += typeof item.value === 'string' ? `"${item.value}"` : item.value;
      }
    }
    
    // Construction de l'expression compl√®te
    const fullExpr = `${validationExpr} ${comparisonSequence.length > 0 ? '==' : ''} ${comparisonExpr}`;
    
    console.log(`[ValidationEvaluator] üìù Expression √† √©valuer: ${fullExpr}`);
    
    // √âvaluation s√©curis√©e de l'expression
    let result;
    try {
      // Utilisation d'une fonction anonyme pour √©viter eval()
      result = new Function(`return ${fullExpr}`)();
    } catch (error) {
      console.error(`[ValidationEvaluator] ‚ùå Erreur lors de l'√©valuation: ${error}`);
      return { 
        isValid: false, 
        error: `Erreur d'√©valuation: ${error}`, 
        details: { expression: fullExpr, error }
      };
    }
    
    console.log(`[ValidationEvaluator] üîç R√©sultat de l'√©valuation: ${result}`);
    
    // La validation est valide si l'expression est vraie
    return { 
      isValid: !!result, 
      error: !result ? validation.errorMessage || "Validation √©chou√©e" : undefined,
      details: { expression: fullExpr, result }
    };
    
  } catch (error) {
    console.error(`[ValidationEvaluator] ‚ùå Erreur lors de l'√©valuation de la validation: ${error}`);
    return { 
      isValid: false, 
      error: `Erreur lors de l'√©valuation: ${error}`, 
      details: error
    };
  }
}

