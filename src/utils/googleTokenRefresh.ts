/**
 * Syst√®me de refresh automatique des tokens Google - Version int√©gr√©e
 * Cette version √©vite les probl√®mes de compilation en int√©grant directement le code
 */

import { google } from 'googleapis';
import { prisma } from '../lib/prisma.js';

export interface RefreshTokenResult {
  success: boolean;
  accessToken?: string;
  refreshToken?: string;
  expiresAt?: Date;
  error?: string;
}

/**
 * V√©rifie et rafra√Æchit automatiquement un token Google si n√©cessaire
 */
export async function refreshGoogleTokenIfNeeded(organizationId: string): Promise<RefreshTokenResult> {
  try {
    console.log('[REFRESH-TOKEN] üîç V√©rification token pour organisation:', organizationId);

    // 1. R√©cup√©rer le token actuel
    const googleToken = await prisma.googleToken.findUnique({
      where: { organizationId }
    });

    if (!googleToken) {
      console.log('[REFRESH-TOKEN] ‚ùå Aucun token trouv√© pour l\'organisation:', organizationId);
      return { success: false, error: 'no_token_found' };
    }

    console.log('[REFRESH-TOKEN] üìã Token trouv√©, expiration:', googleToken.expiresAt);

    // 2. V√©rifier si le token est proche de l'expiration (dans les 30 prochaines minutes)
    const now = new Date();
    const thirtyMinutesFromNow = new Date(now.getTime() + 30 * 60 * 1000);
    const isExpiring = googleToken.expiresAt && googleToken.expiresAt <= thirtyMinutesFromNow;
    const isExpired = googleToken.expiresAt && googleToken.expiresAt <= now;

    console.log('[REFRESH-TOKEN] ‚è∞ Maintenant:', now.toISOString());
    console.log('[REFRESH-TOKEN] ‚è∞ Token expire le:', googleToken.expiresAt?.toISOString());
    console.log('[REFRESH-TOKEN] ‚ö†Ô∏è Token expirant bient√¥t (30min)?', isExpiring);
    console.log('[REFRESH-TOKEN] ‚ùå Token d√©j√† expir√©?', isExpired);

    console.log('[REFRESH-TOKEN] ‚è∞ √âtat du token (d√©lai 30min):');
    console.log('  - Expire le:', googleToken.expiresAt);
    console.log('  - Maintenant:', now);
    console.log('  - Expir√©:', isExpired);
    console.log('  - Expire bient√¥t (30min):', isExpiring);

    // 3. Si le token n'est pas expir√© et pas proche de l'expiration, on le retourne tel quel
    if (!isExpiring && !isExpired) {
      console.log('[REFRESH-TOKEN] ‚úÖ Token encore valide (plus de 30min), pas de refresh n√©cessaire');
      return {
        success: true,
        accessToken: googleToken.accessToken,
        refreshToken: googleToken.refreshToken || undefined,
        expiresAt: googleToken.expiresAt
      };
    }

    // 4. Le token est expir√© ou expire bient√¥t (moins de 30min), tentative de refresh
    if (!googleToken.refreshToken) {
      console.log('[REFRESH-TOKEN] ‚ùå Token expir√© mais pas de refresh token disponible');
      return { success: false, error: 'no_refresh_token' };
    }

    console.log('[REFRESH-TOKEN] üîÑ Token expir√©/expirant (moins de 30min), tentative de refresh...');

    // 5. R√©cup√©rer la configuration OAuth
    const googleConfig = await prisma.googleWorkspaceConfig.findUnique({
      where: { organizationId }
    });

    if (!googleConfig || !googleConfig.clientId || !googleConfig.clientSecret) {
      console.log('[REFRESH-TOKEN] ‚ùå Configuration OAuth manquante pour l\'organisation:', organizationId);
      console.log('[REFRESH-TOKEN] üìã Config trouv√©e:', !!googleConfig);
      if (googleConfig) {
        console.log('[REFRESH-TOKEN] üìã ClientId pr√©sent:', !!googleConfig.clientId);
        console.log('[REFRESH-TOKEN] üìã ClientSecret pr√©sent:', !!googleConfig.clientSecret);
      }
      return { success: false, error: 'missing_oauth_config' };
    }

    // 6. Cr√©er le client OAuth et tenter le refresh
    console.log('[REFRESH-TOKEN] üîß Configuration OAuth client...');
    const oauth2Client = new google.auth.OAuth2(
      googleConfig.clientId,
      googleConfig.clientSecret,
      googleConfig.redirectUri
    );

    // Configurer le refresh token
    console.log('[REFRESH-TOKEN] üîë Configuration des credentials...');
    oauth2Client.setCredentials({
      refresh_token: googleToken.refreshToken || undefined
    });

    try {
      console.log('[REFRESH-TOKEN] üöÄ Tentative de refresh du token...');
      // Forcer le refresh du token
      const { credentials } = await oauth2Client.refreshAccessToken();
      
      console.log('[REFRESH-TOKEN] ‚úÖ Refresh r√©ussi!');
      console.log('[REFRESH-TOKEN] üìã Nouveau token expire le:', new Date(credentials.expiry_date || 0));
      console.log('[REFRESH-TOKEN] üìã Token re√ßu:', !!credentials.access_token);
      console.log('[REFRESH-TOKEN] üìã Nouveau refresh token re√ßu:', !!credentials.refresh_token);

      // 7. Sauvegarder le nouveau token
      const newExpiresAt = credentials.expiry_date ? new Date(credentials.expiry_date) : null;
      
      console.log('[REFRESH-TOKEN] üíæ Sauvegarde du nouveau token...');
      await prisma.googleToken.update({
        where: { organizationId },
        data: {
          accessToken: credentials.access_token!,
          expiresAt: newExpiresAt,
          updatedAt: new Date(),
          // Garder l'ancien refresh token sauf si un nouveau est fourni
          ...(credentials.refresh_token && {
            refreshToken: credentials.refresh_token
          })
        }
      });

      console.log('[REFRESH-TOKEN] üíæ Token mis √† jour en base de donn√©es');

      return {
        success: true,
        accessToken: credentials.access_token!,
        refreshToken: credentials.refresh_token || googleToken.refreshToken || undefined,
        expiresAt: newExpiresAt
      };

    } catch (refreshError: unknown) {
      console.error('[REFRESH-TOKEN] ‚ùå Erreur lors du refresh:', refreshError);
      
      // Analyser le type d'erreur
      const errorMessage = refreshError instanceof Error ? refreshError.message : String(refreshError);
      console.log('[REFRESH-TOKEN] üîç Message d\'erreur:', errorMessage);
      
      if (errorMessage.includes('invalid_grant')) {
        console.log('[REFRESH-TOKEN] üö® Refresh token invalide ou r√©voqu√©');
        return { success: false, error: 'invalid_refresh_token' };
      } else if (errorMessage.includes('invalid_client')) {
        console.log('[REFRESH-TOKEN] üö® Configuration OAuth invalide');
        return { success: false, error: 'invalid_oauth_config' };
      } else {
        console.log('[REFRESH-TOKEN] üö® Erreur g√©n√©rique:', errorMessage);
        return { success: false, error: 'refresh_failed' };
      }
    }

  } catch (error) {
    console.error('[REFRESH-TOKEN] ‚ùå Erreur g√©n√©rale dans refreshGoogleTokenIfNeeded:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.log('[REFRESH-TOKEN] üîç D√©tails de l\'erreur g√©n√©rale:', errorMessage);
    return { success: false, error: 'general_error' };
  }
}
