import type { FieldDependency } from "../../../../../../../store/slices/types";

// Interface pour le r√©sultat de validation
interface DependencyValidationResult {
  isValid: boolean;
  message: string;
  details?: any;
}

/**
 * Valide une d√©pendance avant toute manipulation API.
 * @param dependency La d√©pendance √† v√©rifier
 * @param origin Le composant d'origine de l'appel (pour le debug)
 */
export function validateDependency(dependency: FieldDependency, origin: string = 'unknown'): DependencyValidationResult {
  console.log(`[DependencyValidator:${origin}] üîç Validation de l'objet d√©pendance ${dependency?.id}`);

  // V√©rification de base
  if (!dependency) {
    console.error(`[DependencyValidator:${origin}] ‚ùå D√©pendance ind√©finie`);
    return { isValid: false, message: "D√©pendance ind√©finie" };
  }

  // V√©rification de l'ID
  if (!dependency.id) {
    console.error(`[DependencyValidator:${origin}] ‚ùå ID de d√©pendance manquant`);
    return { isValid: false, message: "ID de d√©pendance manquant" };
  }

  // V√©rification du champ cible
  if (!dependency.targetFieldId) {
    console.error(`[DependencyValidator:${origin}] ‚ùå ID de champ cible manquant pour ${dependency.id}`);
    return { isValid: false, message: "ID de champ cible manquant" };
  }

  // V√©rification de la s√©quence
  if (!dependency.sequence) {
    console.warn(`[DependencyValidator:${origin}] ‚ö†Ô∏è S√©quence de d√©pendance manquante pour ${dependency.id}`);
    // Une s√©quence manquante n'est pas fatale, on peut en cr√©er une par d√©faut
    return { 
      isValid: true, 
      message: "S√©quence de d√©pendance manquante, une s√©quence par d√©faut sera cr√©√©e" 
    };
  }

  // V√©rification des conditions et de l'action
  const { conditions, action } = dependency.sequence;
  
  if (!Array.isArray(conditions)) {
    console.error(`[DependencyValidator:${origin}] ‚ùå Conditions n'est pas un tableau dans ${dependency.id}`);
    return { 
      isValid: false, 
      message: "Format de conditions invalide", 
      details: { conditions }
    };
  }

  // V√©rification de l'action
  const validActions = ['show', 'hide', 'require', 'unrequire'];
  if (!validActions.includes(action)) {
    console.error(`[DependencyValidator:${origin}] ‚ùå Action invalide "${action}" dans ${dependency.id}`);
    return { 
      isValid: false, 
      message: `Action invalide "${action}". Les actions valides sont: ${validActions.join(', ')}`, 
      details: { action }
    };
  }

  // V√©rification de chaque groupe de conditions
  for (let i = 0; i < conditions.length; i++) {
    const conditionGroup = conditions[i];
    
    if (!Array.isArray(conditionGroup)) {
      console.error(`[DependencyValidator:${origin}] ‚ùå Groupe de conditions ${i} n'est pas un tableau dans ${dependency.id}`);
      return { 
        isValid: false, 
        message: `Format de groupe de conditions ${i} invalide`, 
        details: { conditionGroup }
      };
    }

    // V√©rification de chaque √©l√©ment du groupe
    for (const item of conditionGroup) {
      if (!item.type) {
        console.error(`[DependencyValidator:${origin}] ‚ùå √âl√©ment de condition sans type dans ${dependency.id}`, item);
        return { 
          isValid: false, 
          message: "√âl√©ment de condition invalide (type manquant)", 
          details: item 
        };
      }
      
      if (item.type === 'field' && !item.id) {
        console.error(`[DependencyValidator:${origin}] ‚ùå Champ sans ID dans les conditions de ${dependency.id}`, item);
        return { 
          isValid: false, 
          message: "Champ invalide dans les conditions (ID manquant)", 
          details: item 
        };
      }
      
      if (item.type === 'operator' && !item.value) {
        console.error(`[DependencyValidator:${origin}] ‚ùå Op√©rateur sans valeur dans les conditions de ${dependency.id}`, item);
        return { 
          isValid: false, 
          message: "Op√©rateur invalide dans les conditions (valeur manquante)", 
          details: item 
        };
      }
    }
  }

  console.log(`[DependencyValidator:${origin}] ‚úÖ D√©pendance ${dependency.id} est valide`);
  return { isValid: true, message: "D√©pendance valide" };
}

/**
 * Pr√©pare une d√©pendance pour l'envoi √† l'API.
 * @param dependency La d√©pendance √† pr√©parer
 */
export function prepareDependencyForAPI(dependency: FieldDependency): any {
  console.log(`[DependencyValidator] üîß Pr√©paration de la d√©pendance ${dependency.id} pour l'API`);
  
  // Cr√©ation d'une copie pour ne pas modifier l'original
  const prepared = {
    id: dependency.id,
    name: dependency.name || "D√©pendance sans nom",
    sequence: dependency.sequence || { 
      conditions: [[]], 
      action: 'show',
      targetFieldId: dependency.targetFieldId
    },
    targetFieldId: dependency.targetFieldId
  };

  console.log(`[DependencyValidator] ‚úÖ D√©pendance ${dependency.id} pr√™te pour l'API`, prepared);
  return prepared;
}

/**
 * R√©cup√®re les en-t√™tes standard pour les appels API.
 */
export function getAPIHeaders(): HeadersInit {
  return {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };
}

/**
 * √âvalue une r√®gle de d√©pendance avec des valeurs r√©elles.
 * @param dependency La d√©pendance √† √©valuer
 * @param values Les valeurs √† utiliser pour l'√©valuation
 */
export function evaluateDependency(
  dependency: FieldDependency,
  values: Record<string, unknown>
): { result: 'show' | 'hide' | 'require' | 'unrequire'; details?: unknown } {
  console.log(`[DependencyEvaluator] üß™ √âvaluation de la d√©pendance ${dependency.id}`, values);
  
  if (!dependency.sequence) {
    console.warn(`[DependencyEvaluator] ‚ö†Ô∏è Pas de s√©quence √† √©valuer pour ${dependency.id}`);
    return { result: 'show' }; // Par d√©faut, on montre le champ
  }
  
  try {
    const { conditions, action } = dependency.sequence;
    
    // Si pas de conditions, on applique l'action par d√©faut
    if (!conditions || conditions.length === 0 || (conditions.length === 1 && conditions[0].length === 0)) {
      console.log(`[DependencyEvaluator] ‚ÑπÔ∏è Pas de conditions, action par d√©faut: ${action}`);
      return { result: action };
    }
    
    // √âvaluation des conditions (OU logique entre les groupes)
    let finalResult = false;
    
    for (const conditionGroup of conditions) {
      if (conditionGroup.length === 0) continue;
      
      // Construction de l'expression pour ce groupe (ET logique dans le groupe)
      let groupExpr = '';
      
      // Traitement des √©l√©ments du groupe
      for (let i = 0; i < conditionGroup.length; i++) {
        const item = conditionGroup[i];
        
        if (item.type === 'field') {
          if (!item.id) continue;
          const value = values[item.id] ?? null;
          groupExpr += typeof value === 'string' ? `"${value}"` : value;
        } else if (item.type === 'operator') {
          groupExpr += ` ${item.value} `;
        } else if (item.type === 'value') {
          groupExpr += typeof item.value === 'string' ? `"${item.value}"` : item.value;
        }
      }
      
      console.log(`[DependencyEvaluator] üìù Expression de groupe √† √©valuer: ${groupExpr}`);
      
      // √âvaluation s√©curis√©e de l'expression du groupe
      let groupResult;
      try {
        // Utilisation d'une fonction anonyme pour √©viter eval()
        groupResult = new Function(`return ${groupExpr}`)();
      } catch (error) {
        console.error(`[DependencyEvaluator] ‚ùå Erreur lors de l'√©valuation du groupe: ${error}`);
        continue; // On passe au groupe suivant en cas d'erreur
      }
      
      console.log(`[DependencyEvaluator] üîç R√©sultat de l'√©valuation du groupe: ${groupResult}`);
      
      // Si ce groupe est vrai, le r√©sultat final est vrai (OU logique)
      if (groupResult) {
        finalResult = true;
        break;
      }
    }
    
    console.log(`[DependencyEvaluator] üîç R√©sultat final de l'√©valuation: ${finalResult}`);
    
    // Application de l'action en fonction du r√©sultat
    if (finalResult) {
      // Les conditions sont remplies, on applique l'action
      return { result: action, details: { conditionsResult: finalResult, appliedAction: action } };
    } else {
      // Les conditions ne sont pas remplies, on applique l'action inverse
      const inverseAction = 
        action === 'show' ? 'hide' : 
        action === 'hide' ? 'show' : 
        action === 'require' ? 'unrequire' : 'require';
      
      return { result: inverseAction, details: { conditionsResult: finalResult, appliedAction: inverseAction } };
    }
    
  } catch (error) {
    console.error(`[DependencyEvaluator] ‚ùå Erreur lors de l'√©valuation de la d√©pendance: ${error}`);
    return { result: 'show', details: { error } }; // Par d√©faut, on montre le champ en cas d'erreur
  }
}

