import React, { useState } from 'react';
import { Button, Space, Card, Typography, Tag, Tooltip, Segmented, Empty } from 'antd';
import {
  SettingOutlined,
  CopyOutlined,
  DeleteOutlined,
  EyeOutlined,
  EyeInvisibleOutlined,
  PlusOutlined,
  DragOutlined,
  DesktopOutlined,
  MobileOutlined,
  TabletOutlined
} from '@ant-design/icons';
import { DndContext, closestCenter, DragEndEvent } from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  useSortable,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import SectionRendererV2 from './SectionRendererV2';

const { Text, Title } = Typography;

interface Section {
  id: number;
  type: string;
  name: string;
  content: any;
  isActive: boolean;
  backgroundColor?: string;
  textColor?: string;
}

interface SortableItemProps {
  section: Section;
  onEdit: (section: Section) => void;
  onDuplicate: (section: Section) => void;
  onDelete: (section: Section) => void;
  onToggle: (section: Section) => void;
  viewMode: string;
}

/**
 * Item sortable individuel
 */
const SortableItem: React.FC<SortableItemProps> = ({
  section,
  onEdit,
  onDuplicate,
  onDelete,
  onToggle,
  viewMode
}) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging
  } = useSortable({ id: section.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : (section.isActive ? 1 : 0.6)
  };

  const [isHovered, setIsHovered] = useState(false);

  return (
    <div ref={setNodeRef} style={style}>
      <div
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        style={{
          position: 'relative',
          border: isHovered ? '2px solid #1890ff' : '2px solid transparent',
          borderRadius: '8px',
          marginBottom: '16px',
          overflow: 'hidden',
          transition: 'all 0.2s'
        }}
      >
    const bgColor = section.backgroundColor || '#ffffff';
    const textColor = section.textColor || '#000000';

    switch (section.type) {
      case 'header':
        const logoText = getText(section.content?.logo, 'Logo');
        const logoColor = typeof section.content?.logo === 'object' 
          ? section.content.logo.color 
          : textColor;
        const ctaButtonText = getText(section.content?.ctaButton, 'CTA');
        
        return (
          <div style={{ 
            background: bgColor, 
            padding: '16px', 
            display: 'flex', 
            justifyContent: 'space-between',
            alignItems: 'center',
            borderBottom: '1px solid #e5e7eb'
          }}>
            <Text strong style={{ color: logoColor }}>
              {logoText}
            </Text>
            <Button size="small" type="primary">
              {ctaButtonText}
            </Button>
          </div>
        );

      case 'hero':
        const buttons = Array.isArray(section.content?.buttons) 
          ? section.content.buttons 
          : [];
        
        return (
          <div style={{ 
            background: section.content?.backgroundGradient || bgColor,
            padding: '60px 24px',
            textAlign: 'center',
            minHeight: '200px',
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center'
          }}>
            <Title level={3} style={{ color: textColor, margin: '0 0 16px 0' }}>
              {getText(section.content?.title, 'Titre Hero')}
            </Title>
            <Text style={{ color: textColor }}>
              {getText(section.content?.subtitle, 'Sous-titre')}
            </Text>
            {section.content?.badge && (
              <Text style={{ color: textColor, fontSize: '14px', marginTop: '8px' }}>
                {getText(section.content.badge)}
              </Text>
            )}
            <Space style={{ marginTop: '24px' }}>
              {buttons.length > 0 ? (
                buttons.map((btn: any, idx: number) => (
                  <Button 
                    key={idx} 
                    type={idx === 0 ? 'primary' : 'default'}
                    style={btn.style || {}}
                  >
                    {btn.icon && <span>{btn.icon} </span>}
                    {getText(btn, btn.text)}
                  </Button>
                ))
              ) : (
                <>
                  <Button type="primary">{getText(section.content?.primaryButtonText, 'Action')}</Button>
                  {section.content?.secondaryButtonText && (
                    <Button>{getText(section.content.secondaryButtonText)}</Button>
                  )}
                </>
              )}
            </Space>
          </div>
        );

      case 'stats':
        return (
          <div style={{ background: bgColor, padding: '40px 24px' }}>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: viewMode === 'mobile' ? '1fr 1fr' : 'repeat(4, 1fr)',
              gap: '16px' 
            }}>
              {(section.content?.stats || []).slice(0, 4).map((stat: any, idx: number) => (
                <Card key={idx} size="small" style={{ textAlign: 'center' }}>
                  <div style={{ fontSize: '32px', marginBottom: '8px' }}>{stat.icon || 'üìä'}</div>
                  <Text strong style={{ fontSize: '18px', color: '#10b981' }}>
                    {stat.value}
                  </Text>
                  <br />
                  <Text type="secondary" style={{ fontSize: '12px' }}>
                    {stat.label}
                  </Text>
                </Card>
              ))}
            </div>
          </div>
        );

      case 'cta':
        const ctaButtons = Array.isArray(section.content?.buttons) 
          ? section.content.buttons 
          : [];
        
        return (
          <div style={{ 
            background: section.content?.backgroundGradient || bgColor,
            padding: '60px 24px',
            textAlign: 'center'
          }}>
            <Title level={3} style={{ color: textColor, margin: 0 }}>
              {getText(section.content?.title, 'Call to Action')}
            </Title>
            <Text style={{ color: textColor, display: 'block', margin: '16px 0' }}>
              {getText(section.content?.subtitle, 'Description')}
            </Text>
            {section.content?.address && (
              <Text style={{ color: textColor, display: 'block', fontSize: '14px', marginTop: '8px' }}>
                {getText(section.content.address)}
              </Text>
            )}
            <Space style={{ marginTop: '16px' }}>
              {ctaButtons.length > 0 ? (
                ctaButtons.map((btn: any, idx: number) => (
                  <Button 
                    key={idx} 
                    type={idx === 0 ? 'primary' : 'default'}
                    size="large"
                    style={btn.style || {}}
                  >
                    {btn.icon && <span>{btn.icon} </span>}
                    {getText(btn, btn.text)}
                  </Button>
                ))
              ) : (
                <>
                  <Button type="primary" size="large">
                    {getText(section.content?.primaryButton, 'Action Principale')}
                  </Button>
                  {section.content?.secondaryButton && (
                    <Button size="large">
                      {getText(section.content.secondaryButton)}
                    </Button>
                  )}
                </>
              )}
            </Space>
          </div>
        );

      case 'footer':
        const columns = Array.isArray(section.content?.columns) 
          ? section.content.columns 
          : [
              { title: 'Entreprise' },
              { title: 'Solutions' },
              { title: 'Support' },
              { title: 'Contact' }
            ];
        
        return (
          <div style={{ 
            background: bgColor || '#1f2937', 
            padding: '40px 24px',
            color: textColor || '#ffffff'
          }}>
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: viewMode === 'mobile' ? '1fr' : `repeat(${Math.min(columns.length, 4)}, 1fr)`,
              gap: '24px',
              fontSize: '12px'
            }}>
              {columns.map((col: any, idx: number) => (
                <div key={idx}>
                  <Text strong style={{ color: textColor || '#ffffff', display: 'block', marginBottom: '8px' }}>
                    {col.title}
                  </Text>
                  {col.links && col.links.map((link: any, linkIdx: number) => (
                    <div key={linkIdx} style={{ marginBottom: '4px' }}>
                      <Text style={{ color: '#9ca3af', fontSize: '12px' }}>
                        {typeof link === 'string' ? link : link.text}
                      </Text>
                    </div>
                  ))}
                </div>
              ))}
            </div>
            {section.content?.copyright && (
              <div style={{ textAlign: 'center', marginTop: '32px', paddingTop: '24px', borderTop: '1px solid #374151' }}>
                <Text style={{ color: '#6b7280', fontSize: '12px' }}>
                  {getText(section.content.copyright)}
                </Text>
              </div>
            )}
          </div>
        );

      case 'services':
      case 'projects':
      case 'testimonials':
        const itemsTitle = section.type === 'services' ? '‚ö° Services' 
          : section.type === 'projects' ? 'üì∏ Projets' 
          : '‚≠ê T√©moignages';
        const itemEmoji = section.type === 'services' ? '‚ö°' 
          : section.type === 'projects' ? 'üì∏' 
          : '‚≠ê';
        return (
          <div style={{ background: bgColor, padding: '40px 24px' }}>
            <Title level={4} style={{ textAlign: 'center', marginBottom: '24px', color: textColor }}>
              {getText(section.content?.title, itemsTitle)}
            </Title>
            {section.content?.subtitle && (
              <Text style={{ display: 'block', textAlign: 'center', color: '#64748b', marginBottom: '24px', fontSize: '14px' }}>
                {getText(section.content.subtitle)}
              </Text>
            )}
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: viewMode === 'mobile' ? '1fr' : 'repeat(3, 1fr)',
              gap: '16px' 
            }}>
              {[1, 2, 3].map((i) => (
                <Card 
                  key={i} 
                  size="small" 
                  style={{ 
                    textAlign: 'center',
                    borderRadius: '12px',
                    border: '2px solid #e5e7eb'
                  }}
                >
                  <div style={{ fontSize: '32px', marginBottom: '8px' }}>{itemEmoji}</div>
                  <Text strong style={{ display: 'block', fontSize: '12px' }}>
                    {section.type === 'services' ? 'Service' 
                      : section.type === 'projects' ? 'Projet' 
                      : 'T√©moignage'} {i}
                  </Text>
                  <Text type="secondary" style={{ fontSize: '10px' }}>
                    {section.content?.dataSource === 'dynamic' ? 'Donn√©es r√©elles' : 'Configuration'}
                  </Text>
                </Card>
              ))}
            </div>
          </div>
        );

      case 'content':
        // Section "Pourquoi choisir" avec valeurs
        const valuesEmojis = ['üå±', 'üí∞', 'üõ°Ô∏è', 'ü§ù'];
        return (
          <div style={{ background: bgColor, padding: '40px 24px' }}>
            <Title level={4} style={{ textAlign: 'center', marginBottom: '24px', color: textColor }}>
              {getText(section.content?.title, 'üíö Nos Valeurs')}
            </Title>
            {section.content?.subtitle && (
              <Text style={{ display: 'block', textAlign: 'center', color: '#64748b', marginBottom: '24px', fontSize: '14px' }}>
                {getText(section.content.subtitle)}
              </Text>
            )}
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: viewMode === 'mobile' ? '1fr 1fr' : 'repeat(4, 1fr)',
              gap: '16px' 
            }}>
              {[1, 2, 3, 4].map((i) => (
                <Card 
                  key={i} 
                  size="small" 
                  style={{ 
                    textAlign: 'center',
                    borderRadius: '12px',
                    background: 'white',
                    boxShadow: '0 2px 8px rgba(0,0,0,0.08)'
                  }}
                >
                  <div style={{ fontSize: '40px', marginBottom: '8px' }}>{valuesEmojis[i-1]}</div>
                  <Text strong style={{ fontSize: '13px', display: 'block', marginBottom: '4px' }}>
                    {['√âcologique', '√âconomique', 'Qualit√©', 'Accompagnement'][i-1]}
                  </Text>
                  <Text type="secondary" style={{ fontSize: '10px' }}>
                    {section.content?.dataSource === 'config.valuesJson' ? 'Config' : 'Description'}
                  </Text>
                </Card>
              ))}
            </div>
          </div>
        );

      case 'steps':
        // Section processus
        const stepsTitles = ['Contact', '√âtude', 'Devis', 'Installation', 'Suivi'];
        return (
          <div style={{ background: bgColor, padding: '40px 24px' }}>
            <Title level={4} style={{ textAlign: 'center', marginBottom: '24px', color: textColor }}>
              {getText(section.content?.title, 'üöÄ Notre Processus')}
            </Title>
            {section.content?.subtitle && (
              <Text style={{ display: 'block', textAlign: 'center', color: '#64748b', marginBottom: '24px', fontSize: '14px' }}>
                {getText(section.content.subtitle)}
              </Text>
            )}
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-around',
              flexDirection: viewMode === 'mobile' ? 'column' : 'row',
              gap: '16px',
              alignItems: 'center'
            }}>
              {(section.content?.steps || stepsTitles).slice(0, 5).map((step: any, idx: number) => (
                <div key={idx} style={{ textAlign: 'center', maxWidth: '150px' }}>
                  <div style={{ 
                    width: '48px', 
                    height: '48px', 
                    borderRadius: '50%', 
                    background: '#10b981',
                    color: 'white',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    margin: '0 auto 8px',
                    fontSize: '20px',
                    fontWeight: 'bold'
                  }}>
                    {idx + 1}
                  </div>
                  <Text strong style={{ fontSize: '12px', display: 'block' }}>
                    {typeof step === 'object' ? getText(step.title, stepsTitles[idx]) : (typeof step === 'string' ? step : stepsTitles[idx])}
                  </Text>
                  {typeof step === 'object' && step.description && (
                    <Text type="secondary" style={{ fontSize: '10px', display: 'block', marginTop: '4px' }}>
                      {getText(step.description, '').substring(0, 30)}...
                    </Text>
                  )}
                </div>
              ))}
            </div>
          </div>
        );

      default:
        return (
          <div style={{ background: bgColor, padding: '40px 24px', minHeight: '100px' }}>
            <Text style={{ color: textColor }}>
              Section {section.type} - {section.name}
            </Text>
          </div>
        );
    }
  };

  return (
    <div ref={setNodeRef} style={style}>
      <div
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        style={{
          position: 'relative',
          border: isHovered ? '2px solid #1890ff' : '2px solid transparent',
          borderRadius: '8px',
          marginBottom: '16px',
          overflow: 'hidden',
          transition: 'all 0.2s'
        }}
      >
        {/* BARRE D'ACTIONS (visible au survol) */}
        {isHovered && (
          <div style={{
            position: 'absolute',
            top: '8px',
            right: '8px',
            zIndex: 10,
            background: 'rgba(255, 255, 255, 0.95)',
            padding: '4px',
            borderRadius: '8px',
            boxShadow: '0 2px 8px rgba(0,0,0,0.15)'
          }}>
            <Space size="small">
              <Tooltip title="D√©placer">
                <Button
                  type="text"
                  size="small"
                  icon={<DragOutlined />}
                  {...attributes}
                  {...listeners}
                  style={{ cursor: 'grab' }}
                />
              </Tooltip>
              <Tooltip title={section.isActive ? 'D√©sactiver' : 'Activer'}>
                <Button
                  type="text"
                  size="small"
                  icon={section.isActive ? <EyeOutlined /> : <EyeInvisibleOutlined />}
                  onClick={() => onToggle(section)}
                />
              </Tooltip>
              <Tooltip title="Configurer">
                <Button
                  type="text"
                  size="small"
                  icon={<SettingOutlined />}
                  onClick={() => onEdit(section)}
                />
              </Tooltip>
              <Tooltip title="Dupliquer">
                <Button
                  type="text"
                  size="small"
                  icon={<CopyOutlined />}
                  onClick={() => onDuplicate(section)}
                />
              </Tooltip>
              <Tooltip title="Supprimer">
                <Button
                  type="text"
                  size="small"
                  danger
                  icon={<DeleteOutlined />}
                  onClick={() => onDelete(section)}
                />
              </Tooltip>
            </Space>
          </div>
        )}

        {/* TAG INACTIF */}
        {!section.isActive && (
          <div style={{
            position: 'absolute',
            top: '8px',
            left: '8px',
            zIndex: 9
          }}>
            <Tag color="default">Inactif</Tag>
          </div>
        )}

        {/* RENDU R√âEL DE LA SECTION avec SectionRendererV2 */}
        <div 
          onClick={() => onEdit(section)} 
          style={{ 
            cursor: 'pointer',
            opacity: section.isActive ? 1 : 0.6,
            pointerEvents: 'none' // D√©sactive les interactions dans le canvas
          }}
        >
          <SectionRendererV2 section={section} />
        </div>

        {/* LABEL DU TYPE */}
        <div style={{
          background: '#f0f0f0',
          padding: '4px 12px',
          fontSize: '11px',
          color: '#666',
          textAlign: 'center',
          borderTop: '1px solid #e0e0e0'
        }}>
          {section.name} ‚Ä¢ {section.type}
        </div>
      </div>
    </div>
  );
};

/**
 * üé® CANVAS NO-CODE
 * Zone centrale avec aper√ßu temps r√©el
 * Drag & drop pour r√©organiser
 */
interface NoCodeCanvasProps {
  sections: Section[];
  onReorder: (sections: Section[]) => void;
  onEditSection: (section: Section) => void;
  onDuplicateSection: (section: Section) => void;
  onDeleteSection: (section: Section) => void;
  onToggleSection: (section: Section) => void;
  onAddSection: () => void;
}

const NoCodeCanvas: React.FC<NoCodeCanvasProps> = ({
  sections,
  onReorder,
  onEditSection,
  onDuplicateSection,
  onDeleteSection,
  onToggleSection,
  onAddSection
}) => {
  const [viewMode, setViewMode] = useState<string>('desktop');

  // Gestion du drag & drop
  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (over && active.id !== over.id) {
      const oldIndex = sections.findIndex((s) => s.id === active.id);
      const newIndex = sections.findIndex((s) => s.id === over.id);
      const reorderedSections = arrayMove(sections, oldIndex, newIndex);
      onReorder(reorderedSections);
    }
  };

  // Largeur selon le mode
  const canvasWidth = 
    viewMode === 'mobile' ? '375px' :
    viewMode === 'tablet' ? '768px' :
    '100%';

  return (
    <div style={{ 
      flex: 1, 
      height: '100vh', 
      overflowY: 'auto',
      background: '#ffffff',
      display: 'flex',
      flexDirection: 'column'
    }}>
      {/* HEADER DU CANVAS */}
      <div style={{
        position: 'sticky',
        top: 0,
        zIndex: 100,
        background: '#ffffff',
        borderBottom: '1px solid #f0f0f0',
        padding: '16px 24px',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
      }}>
        <Space>
          <Text strong style={{ fontSize: '16px' }}>üé® Canvas</Text>
          <Tag color="blue">{sections.length} section(s)</Tag>
          <Tag color="green">{sections.filter(s => s.isActive).length} active(s)</Tag>
        </Space>

        <Segmented
          value={viewMode}
          onChange={(value) => setViewMode(value as string)}
          options={[
            { label: 'Desktop', value: 'desktop', icon: <DesktopOutlined /> },
            { label: 'Tablet', value: 'tablet', icon: <TabletOutlined /> },
            { label: 'Mobile', value: 'mobile', icon: <MobileOutlined /> }
          ]}
        />
      </div>

      {/* CANVAS CONTENT */}
      <div style={{
        flex: 1,
        padding: '24px',
        display: 'flex',
        justifyContent: 'center'
      }}>
        <div style={{
          width: canvasWidth,
          maxWidth: '100%',
          transition: 'width 0.3s'
        }}>
          {sections.length === 0 ? (
            <Empty
              description="Aucune section"
              style={{ marginTop: '100px' }}
            >
              <Button type="primary" icon={<PlusOutlined />} onClick={onAddSection}>
                Ajouter une section
              </Button>
            </Empty>
          ) : (
            <>
              {/* ZONE D'AJOUT EN HAUT */}
              <Button
                type="dashed"
                block
                icon={<PlusOutlined />}
                onClick={onAddSection}
                style={{ marginBottom: '16px' }}
              >
                Ajouter une section en haut
              </Button>

              {/* SECTIONS DRAG & DROP */}
              <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
                <SortableContext items={sections.map(s => s.id)} strategy={verticalListSortingStrategy}>
                  {sections.map((section) => (
                    <SortableItem
                      key={section.id}
                      section={section}
                      onEdit={onEditSection}
                      onDuplicate={onDuplicateSection}
                      onDelete={onDeleteSection}
                      onToggle={onToggleSection}
                      viewMode={viewMode}
                    />
                  ))}
                </SortableContext>
              </DndContext>

              {/* ZONE D'AJOUT EN BAS */}
              <Button
                type="dashed"
                block
                icon={<PlusOutlined />}
                onClick={onAddSection}
                style={{ marginTop: '16px' }}
              >
                Ajouter une section en bas
              </Button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default NoCodeCanvas;
