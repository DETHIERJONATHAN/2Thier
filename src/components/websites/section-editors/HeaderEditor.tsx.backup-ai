/**
 * ðŸ“Œ Ã‰diteur de Header/Bandeau
 * Logo, menu, boutons
 */

import React, { useState, useEffect } from 'react';
import { Form, Input, Button, Space, Upload, ColorPicker, Switch, message } from 'antd';
import { UploadOutlined, PlusOutlined, DeleteOutlined } from '@ant-design/icons';
import type { UploadFile } from 'antd';

interface HeaderEditorProps {
  section: any;
  onSave: (content: any) => void;
  onCancel: () => void;
}

export const HeaderEditor: React.FC<HeaderEditorProps> = ({ section, onSave, onCancel }) => {
  const [form] = Form.useForm();
  const [logoFile, setLogoFile] = useState<UploadFile[]>([]);
  const [menuItems, setMenuItems] = useState<any[]>([]);

  useEffect(() => {
    if (section) {
      form.setFieldsValue({
        name: section.name,
        backgroundColor: section.backgroundColor || '#ffffff',
        textColor: section.textColor || '#000000',
        ...section.content
      });
      setMenuItems(section.content?.menuItems || []);
      if (section.content?.logo) {
        setLogoFile([{ uid: '-1', name: 'logo.png', status: 'done', url: section.content.logo }]);
      }
    } else {
      // Valeurs par dÃ©faut
      setMenuItems([
        { label: 'Accueil', url: '#accueil' },
        { label: 'Services', url: '#services' },
        { label: 'RÃ©alisations', url: '#realisations' },
        { label: 'Contact', url: '#contact' }
      ]);
    }
  }, [section]);

  const handleAddMenuItem = () => {
    setMenuItems([...menuItems, { label: '', url: '' }]);
  };

  const handleRemoveMenuItem = (index: number) => {
    setMenuItems(menuItems.filter((_, i) => i !== index));
  };

  const handleMenuItemChange = (index: number, field: string, value: string) => {
    const newItems = [...menuItems];
    newItems[index][field] = value;
    setMenuItems(newItems);
  };

  const handleSubmit = (values: any) => {
    onSave({
      name: values.name,
      content: {
        logo: logoFile[0]?.url || logoFile[0]?.response?.url || '',
        siteName: values.siteName,
        tagline: values.tagline,
        menuItems,
        ctaButton: values.ctaButton,
        ctaButtonUrl: values.ctaButtonUrl,
        ctaButtonColor: values.ctaButtonColor,
        phone: values.phone,
        email: values.email
      },
      backgroundColor: values.backgroundColor,
      textColor: values.textColor
    });
  };

  const uploadProps = {
    beforeUpload: (file: File) => {
      const isImage = file.type.startsWith('image/');
      if (!isImage) {
        message.error('Vous ne pouvez uploader que des images !');
      }
      const isLt2M = file.size / 1024 / 1024 < 2;
      if (!isLt2M) {
        message.error('L\'image doit faire moins de 2MB !');
      }
      return isImage && isLt2M;
    },
    onChange: (info: any) => {
      setLogoFile(info.fileList);
    },
    maxCount: 1
  };

  return (
    <Form form={form} layout="vertical" onFinish={handleSubmit}>
      <Form.Item label="Nom de la section" name="name" rules={[{ required: true }]}>
        <Input placeholder="Ex: Header principal" />
      </Form.Item>

      <Form.Item label="Logo" help="Uploadez le logo de votre entreprise (max 2MB)">
        <Upload
          {...uploadProps}
          fileList={logoFile}
          listType="picture-card"
          action="/api/upload" // Ã€ crÃ©er
        >
          {logoFile.length === 0 && <div><UploadOutlined /> Upload</div>}
        </Upload>
      </Form.Item>

      <Form.Item label="Nom du site" name="siteName">
        <Input placeholder="2Thier Ã‰nergies" />
      </Form.Item>

      <Form.Item label="Slogan" name="tagline">
        <Input placeholder="Votre transition Ã©nergÃ©tique" />
      </Form.Item>

      <div style={{ marginBottom: 16 }}>
        <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>
          Menu de navigation
        </label>
        {menuItems.map((item, index) => (
          <Space key={index} style={{ display: 'flex', marginBottom: 8 }} align="baseline">
            <Input
              placeholder="Label"
              value={item.label}
              onChange={(e) => handleMenuItemChange(index, 'label', e.target.value)}
              style={{ width: 150 }}
            />
            <Input
              placeholder="URL"
              value={item.url}
              onChange={(e) => handleMenuItemChange(index, 'url', e.target.value)}
              style={{ width: 200 }}
            />
            <Button
              type="text"
              danger
              icon={<DeleteOutlined />}
              onClick={() => handleRemoveMenuItem(index)}
            />
          </Space>
        ))}
        <Button type="dashed" icon={<PlusOutlined />} onClick={handleAddMenuItem}>
          Ajouter un lien
        </Button>
      </div>

      <Form.Item label="Bouton CTA" name="ctaButton">
        <Input placeholder="Devis gratuit" />
      </Form.Item>

      <Form.Item label="URL du bouton CTA" name="ctaButtonUrl">
        <Input placeholder="/contact" />
      </Form.Item>

      <Form.Item label="Couleur du bouton CTA" name="ctaButtonColor">
        <ColorPicker format="hex" showText />
      </Form.Item>

      <Form.Item label="TÃ©lÃ©phone" name="phone">
        <Input placeholder="+32 XXX XX XX XX" />
      </Form.Item>

      <Form.Item label="Email" name="email">
        <Input placeholder="contact@2thier.be" />
      </Form.Item>

      <Form.Item label="Couleur de fond" name="backgroundColor">
        <ColorPicker format="hex" showText />
      </Form.Item>

      <Form.Item label="Couleur du texte" name="textColor">
        <ColorPicker format="hex" showText />
      </Form.Item>

      <Form.Item>
        <Space>
          <Button type="primary" htmlType="submit">
            Sauvegarder
          </Button>
          <Button onClick={onCancel}>
            Annuler
          </Button>
        </Space>
      </Form.Item>
    </Form>
  );
};
