/**
 * üìä √âditeur de section Statistiques
 * Compteurs de r√©alisations (500 maisons, 15 MW, 4.9‚òÖ, 5 r√©gions)
 */

import React, { useState, useEffect } from 'react';
import { Form, Input, Button, Space, ColorPicker, InputNumber } from 'antd';
import { PlusOutlined, DeleteOutlined, ThunderboltOutlined } from '@ant-design/icons';
import { AIAssistant } from '../AIAssistant';

interface StatsEditorProps {
  section: any;
  onSave: (content: any) => void;
  onCancel: () => void;
}

export const StatsEditor: React.FC<StatsEditorProps> = ({ section, onSave, onCancel }) => {
  const [form] = Form.useForm();
    const [showAI, setShowAI] = useState(false);
  const [aiContext, setAIContext] = useState('');
  const [aiCurrentValue, setAICurrentValue] = useState('');
  const [stats, setStats] = useState<any[]>([]);

  useEffect(() => {
    if (section) {
      form.setFieldsValue({
        name: section.name,
        backgroundColor: section.backgroundColor || '#f9fafb',
        textColor: section.textColor || '#000000',
        ...section.content
      });
      setStats(section.content?.stats || []);
    } else {
      // Valeurs par d√©faut
      form.setFieldsValue({
        title: 'Nos r√©alisations en chiffres',
        subtitle: 'Plus de 10 ans d\'exp√©rience √† votre service'
      });
      setStats([
        { icon: 'üè†', value: '500+', label: 'Maisons √©quip√©es', suffix: '' },
        { icon: '‚ö°', value: '15', label: 'M√©gawatts install√©s', suffix: 'MW' },
        { icon: '‚≠ê', value: '4.9', label: 'Note moyenne', suffix: '/5' },
        { icon: 'üìç', value: '5', label: 'R√©gions couvertes', suffix: '' }
      ]);
    }
  }, [section]);

  const handleAddStat = () => {
    setStats([...stats, { icon: 'üìä', value: '', label: '', suffix: '' }]);
  };

  const handleRemoveStat = (index: number) => {
    setStats(stats.filter((_, i) => i !== index));
  };

  const handleStatChange = (index: number, field: string, value: any) => {
    const newStats = [...stats];
    newStats[index][field] = value;
    setStats(newStats);
  };

  const handleSubmit = (values: any) => {
    onSave({
      name: values.name,
      content: {
        title: values.title,
        subtitle: values.subtitle,
        stats,
        animateCounters: values.animateCounters
      },
      backgroundColor: values.backgroundColor,
      textColor: values.textColor
    });
  };

  return (
    <Form form={form} layout="vertical" onFinish={handleSubmit}>
      <Form.Item label="Nom de la section" name="name" rules={[{ required: true }]}>
        <Input placeholder="Ex: Statistiques" />
      </Form.Item>

      <Form.Item label="Titre (optionnel)" name="title">
        <Input placeholder="Nos r√©alisations en chiffres"
          suffix={
            <Button
              type="link"
              size="small"
              icon={<ThunderboltOutlined />}
              onClick={() => {
                setAIContext('title');
                setAICurrentValue(form.getFieldValue('title') || '');
                setShowAI(true);
              }}
            />
          }
         />
      </Form.Item>

      <Form.Item label="Sous-titre (optionnel)" name="subtitle">
        <Input placeholder="Plus de 10 ans d'exp√©rience"
          suffix={
            <Button
              type="link"
              size="small"
              icon={<ThunderboltOutlined />}
              onClick={() => {
                setAIContext('subtitle');
                setAICurrentValue(form.getFieldValue('subtitle') || '');
                setShowAI(true);
              }}
            />
          }
         />
      </Form.Item>

      <div style={{ marginBottom: 16 }}>
        <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>
          Statistiques (4 max recommand√©)
        </label>
        {stats.map((stat, index) => (
          <Space key={index} style={{ display: 'flex', marginBottom: 12 }} align="baseline">
            <Input
              placeholder="Ic√¥ne"
              value={stat.icon}
              onChange={(e) => handleStatChange(index, 'icon', e.target.value)}
              style={{ width: 60 }}
            />
            <Input
              placeholder="Valeur"
              value={stat.value}
              onChange={(e) => handleStatChange(index, 'value', e.target.value)}
              style={{ width: 100 }}
            />
            <Input
              placeholder="Suffixe"
              value={stat.suffix}
              onChange={(e) => handleStatChange(index, 'suffix', e.target.value)}
              style={{ width: 60 }}
            />
            <Input
              placeholder="Label"
              value={stat.label}
              onChange={(e) => handleStatChange(index, 'label', e.target.value)}
              style={{ width: 180 }}
            />
            <Button
              type="text"
              danger
              icon={<DeleteOutlined />}
              onClick={() => handleRemoveStat(index)}
            />
          </Space>
        ))}
        <Button type="dashed" icon={<PlusOutlined />} onClick={handleAddStat}>
          Ajouter une statistique
        </Button>
      </div>

      <Form.Item label="Couleur de fond" name="backgroundColor">
        <ColorPicker format="hex" showText />
      </Form.Item>

      <Form.Item label="Couleur du texte" name="textColor">
        <ColorPicker format="hex" showText />
      </Form.Item>

      <Form.Item>
        <Space>
          <Button type="primary" htmlType="submit">
            Sauvegarder
          </Button>
          <Button onClick={onCancel}>
            Annuler
          </Button>
        </Space>
      </Form.Item>
    

      {/* ASSISTANT IA */}
      {showAI && (
        <AIAssistant
          visible={showAI}
          onClose={() => setShowAI(false)}
          context={aiContext}
          sectionType="stats"
          currentValue={aiCurrentValue}
          onApply={(value) => {
            form.setFieldsValue({ [aiContext]: value });
            setShowAI(false);
          }}
        />
      )}
    </Form>
  );
};
