/**
 * üé£ useDragAndDrop - Hook pour la gestion du drag & drop
 * 
 * Centralise toute la logique de glisser-d√©poser :
 * - Palette ‚Üí Structure (cr√©er)
 * - Structure ‚Üí Structure (r√©organiser)
 * - Structure ‚Üí Param√®tres (r√©f√©rencer)
 * - R√©utilisables ‚Üí Param√®tres (attacher)
 */

import { useState, useCallback, useMemo } from 'react';
import { DragStartEvent, DragOverEvent, DragEndEvent } from '@dnd-kit/core';
import { message } from 'antd';
import { useThrottledCallback } from './usePerformanceOptimization';
import type { 
  DragItem, 
  DropTargetData, 
  NodeTypeKey,
  TreeBranchLeafNode,
  TreeBranchLeafRegistry
} from '../types';

interface UseDragAndDropOptions {
  onNodeMove: (nodeId: string, targetId?: string, position?: 'before' | 'after' | 'child') => Promise<boolean>;
  onNodeCreate: (data: {
    type: NodeTypeKey;
    label: string;
    parentId?: string;
    fieldType?: string;
    order?: number;
  }) => Promise<TreeBranchLeafNode | null>;
  onCapabilityActivate: (nodeId: string, capability: string, config?: Record<string, unknown>) => Promise<boolean>;
  registry: typeof TreeBranchLeafRegistry;
  nodes: TreeBranchLeafNode[]; // üëà Ajout des n≈ìuds pour validation,
}

interface UseDragAndDropReturn {
  // √âtat
  draggedItem: DragItem | null;
  hoveredTarget: string | null;
  validDrop: boolean;
  
  // Gestionnaires d'√©v√©nements
  handleDragStart: (event: DragStartEvent) => void;
  handleDragOver: (event: DragOverEvent) => boolean;
  handleDragEnd: (event: DragEndEvent) => void;
  
  // Utilitaires
  canDrop: (source: DragItem, target: DropTargetData) => boolean;
  getDropFeedback: (source: DragItem, target: DropTargetData) => string;,
}

export function useDragAndDrop({
  onNodeMove,
  onNodeCreate,
  onCapabilityActivate,
  registry,
  nodes
}: UseDragAndDropOptions): UseDragAndDropReturn {

  // =============================================================================
  // üéõÔ∏è STATE - √âtat local
  // =============================================================================
  
  const [draggedItem, setDraggedItem] = useState<DragItem | null>(null);
  const [hoveredTarget, setHoveredTarget] = useState<string | null>(null);
  const [validDrop, setValidDrop] = useState<boolean>(false);

  // =============================================================================
  // üß† VALIDATION - Logique de validation
  // =============================================================================

  // üèóÔ∏è Validation de la hi√©rarchie TreeBranchLeaf - OPTIMIS√âE
  const validateHierarchicalDrop = useMemo(() => {
    // Cr√©er un Map pour une recherche O(1) au lieu de O(n)
    const nodeMap = new Map(nodes.map(node => [node.id, node]));
    
    return (sourceNodeType: string, target: DropTargetData): boolean => {
      // console.log(`üèóÔ∏è Validation hi√©rarchique - sourceType: ${sourceNodeType}, targetId: ${target.nodeId}`); // ‚ú® Log r√©duit
      
      // Si pas de target.nodeId, c'est la racine de l'arbre
      if (!target.nodeId) {
        // Seules les branches peuvent √™tre √† la racine
        const result = sourceNodeType === 'branch';
        // console.log(`üå≥ Drop √† la racine - sourceType: ${sourceNodeType}, result: ${result}`); // ‚ú® Log r√©duit
        return result;
      }

      // R√©cup√©rer le n≈ìud parent depuis le Map (O(1))
      const parentNode = nodeMap.get(target.nodeId);
      if (!parentNode) {
        // console.warn('‚ùå N≈ìud parent introuvable:', target.nodeId); // ‚ú® Log r√©duit
        return false; // S√©curit√© : refuser si on ne conna√Æt pas le parent
      }

      // console.log(...) // ‚ú® Log r√©duit - objet de debug

      if (newNode) {
        // console.log('‚úÖ N≈ìud cr√©√© avec succ√®s:', newNode); // ‚ú® Log r√©duit
        message.success(`${nodeType.label} cr√©√© avec succ√®s !`);
      } else {
        console.error('‚ùå √âchec de la cr√©ation du n≈ìud');
        message.error(`√âchec de la cr√©ation du ${nodeType.label}`);
      }
    } catch (error) {
      console.error('üí• Erreur lors de la cr√©ation:', error);
      message.error('Erreur lors de la cr√©ation : ' + (error instanceof Error ? error.message : 'Erreur inconnue'));
    }
  }, [onNodeCreate, registry]);

  const handleNodeDrop = useCallback(async (source: DragItem, target: DropTargetData) => {
    // console.log('üì¶ Node Drop:', { source, target }); // ‚ú® Log r√©duit

    if (!source.data?.id) {
      console.error('‚ùå Source sans ID:', source);
      return;
    }

    try {
      const success = await onNodeMove(
        source.data.id,
        target.nodeId,
        target.position
      );

      if (success) {
        // console.log('‚úÖ N≈ìud d√©plac√© avec succ√®s'); // ‚ú® Log r√©duit
        message.success('√âl√©ment d√©plac√© avec succ√®s !');
      } else {
        console.error('‚ùå √âchec du d√©placement du n≈ìud');
        message.error('√âchec du d√©placement de l\'√©l√©ment');
      }
    } catch (error) {
      console.error('üí• Erreur lors du d√©placement:', error);
      message.error('Erreur lors du d√©placement : ' + (error instanceof Error ? error.message : 'Erreur inconnue'));
    }
  }, [onNodeMove]);

  const handleDrop = useCallback(async (source: DragItem, target: DropTargetData) => {
    // console.log('üöÄ Handle Drop:', { source, target }); // ‚ú® Log r√©duit

    switch (source.type) {
      case 'palette-item':
        await handlePaletteDrop(source, target);
        break;
      case 'node':
        await handleNodeDrop(source, target);
        break;
      default:
        // console.warn('‚ùì Type de source non g√©r√©:', source.type); // ‚ú® Log r√©duit
    }
  }, [handlePaletteDrop, handleNodeDrop]);

  const handleDragEnd = useCallback(async (event: DragEndEvent) => {
    const { over } = event;
    // console.log(`üéØ DRAG END - Over: ${over?.id}, Dragged: ${draggedItem?.id}, ValidDrop: ${validDrop}`); // ‚ú® Log r√©duit
    
    if (!over || !draggedItem || !validDrop) {
      // console.log(`‚ùå DROP ANNUL√â - Over: ${!!over}, DraggedItem: ${!!draggedItem}, ValidDrop: ${validDrop}`); // ‚ú® Log r√©duit
      setDraggedItem(null);
      setHoveredTarget(null);
      setValidDrop(false);
      return;
    }

    const targetData: DropTargetData = {
      type: over.data.current?.type || 'structure',
      nodeId: over.data.current?.nodeId,
      capability: over.data.current?.capability,
      position: over.data.current?.position,
      accepts: over.data.current?.accepts || [],
    };

    // console.log(`üöÄ EXECUTING DROP:`, { draggedItem, targetData }); // ‚ú® Log r√©duit

    try {
      await handleDrop(draggedItem, targetData);
      // console.log(`‚úÖ DROP R√âUSSI !`); // ‚ú® Log r√©duit
    } catch (error) {
      console.error(`üí• ERREUR DANS DROP:`, error);
      message.error('Erreur lors du drop : ' + (error instanceof Error ? error.message : 'Erreur inconnue'));
    } finally {
      setDraggedItem(null);
      setHoveredTarget(null);
      setValidDrop(false);
    }
  }, [draggedItem, validDrop, handleDrop]);

  // =============================================================================
  // üí¨ FEEDBACK - Messages utilisateur
  // =============================================================================

  const getDropFeedback = useCallback((source: DragItem, target: DropTargetData): string => {
    if (!canDrop(source, target)) {
      return "‚ùå Drop non autoris√© ici";
    }

    switch (source.type) {
      case 'palette-item':
        return `‚úÖ Cr√©er ${source.nodeType} ici`;
      case 'node':
        return `‚úÖ D√©placer l'√©l√©ment ici`;
      default:
        return "‚úÖ Drop autoris√©";,
    }
  }, [canDrop]);

  // =============================================================================
  // üéØ RETURN - Valeur de retour
  // =============================================================================
  
  return {
    // √âtat
    draggedItem,
    hoveredTarget,
    validDrop,
    
    // Gestionnaires d'√©v√©nements
    handleDragStart,
    handleDragOver,
    handleDragEnd,
    
    // Utilitaires
    canDrop,
    getDropFeedback
  };
}
