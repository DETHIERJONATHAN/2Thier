import React, { useState, useEffect } from 'react';
import { useAuthenticatedApi } from '../../hooks/useAuthenticatedApi';
import { NotificationManager } from '../../components/Notifications';

interface UnifiedPasswordModalProps {
  open: boolean;
  onClose: () => void;
  userId: string;
  userName: string;
}

const modalStyle = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: 400,
  bgcolor: 'background.paper',
  borderRadius: 1,
  boxShadow: 24,
  p: 4,
};

// Composant pour le modal de définition du mot de passe unifié
const UnifiedPasswordModal = ({ open, onClose, userId, userName }: UnifiedPasswordModalProps) => {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const { api } = useAuthenticatedApi();

  const handleSetPassword = async () => {
    // Validation basique
    if (!password) {
      setError("Le mot de passe ne peut pas être vide.");
      return;
    }
    
    if (password !== confirmPassword) {
      setError("Les mots de passe ne correspondent pas.");
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const response = await api.post('/unified-password/set-unified-password', {
        userId,
        password
      });

      if (response.data.success) {
        NotificationManager.success('Le mot de passe unifié a été configuré avec succès');
        onClose();
      } else {
        setError(response.data.error || 'Une erreur est survenue');
      }
    } catch (err: any) {
      setError(err.response?.data?.error || err.message || 'Une erreur est survenue');
      NotificationManager.error(err.response?.data?.error || err.message || 'Une erreur est survenue');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Modal open={open} onClose={onClose}>
      <Box sx={modalStyle}>
        <Typography variant="h6" component="h2" mb={2}>
          Définir un mot de passe unifié pour {userName}
        </Typography>
        
        <Typography variant="body2" color="text.secondary" mb={3}>
          Ce mot de passe sera utilisé pour tous les services : CRM, Email et Telnyx.
        </Typography>
        
        <TextField
          label="Mot de passe"
          type="password"
          fullWidth
          margin="normal"
          value={password}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}
        />
        
        <TextField
          label="Confirmer le mot de passe"
          type="password"
          fullWidth
          margin="normal"
          value={confirmPassword}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setConfirmPassword(e.target.value)}
        />
        
        {error && (
          <Typography color="error" variant="body2" sx={{ mt: 2 }}>
            {error}
          </Typography>
        )}
        
        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
          <Button variant="outlined" onClick={onClose} disabled={isLoading}>
            Annuler
          </Button>
          <Button 
            variant="contained" 
            onClick={handleSetPassword}
            disabled={isLoading}
          >
            {isLoading ? <CircularProgress size={24} /> : "Définir le mot de passe"}
          </Button>
        </Box>
      </Box>
    </Modal>
  );
};

// Composant principal pour la gestion des mots de passe unifiés
const UnifiedPasswordManager = () => {
  const [users, setUsers] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedUser, setSelectedUser] = useState<any>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const { api } = useAuthenticatedApi();

  // Charger la liste des utilisateurs avec leur statut unifié
  useEffect(() => {
    const loadUsers = async () => {
      setIsLoading(true);
      try {
        const response = await api.get('/unified-password/unified-status');
        setUsers(response.data);
      } catch (err: any) {
        NotificationManager.error(
          err.response?.data?.error || err.message || 'Une erreur est survenue lors du chargement des utilisateurs'
        );
      } finally {
        setIsLoading(false);
      }
    };

    loadUsers();
  }, [api]);

  // Ouvrir le modal pour définir un mot de passe unifié
  const handleOpenModal = (user: any) => {
    setSelectedUser(user);
    setModalOpen(true);
  };

  // Fermer le modal
  const handleCloseModal = () => {
    setModalOpen(false);
    setSelectedUser(null);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h5" component="h1" gutterBottom>
        Gestion des mots de passe unifiés
      </Typography>
      
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="body1" gutterBottom>
            Cette page permet de définir un mot de passe unifié pour chaque utilisateur. 
            Ce mot de passe unique sera utilisé pour tous les services :
          </Typography>
          <ul>
            <li>Messagerie électronique</li>
            <li>Paramètres Telnyx</li>
          </ul>
          <Typography variant="body2" color="text.secondary">
            Note: Le mot de passe du compte CRM reste géré séparément pour des raisons de sécurité.
          </Typography>
        </CardContent>
      </Card>
      
      {isLoading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <CircularProgress />
        </Box>
      ) : (
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Utilisateur</TableCell>
                <TableCell>Email</TableCell>
                <TableCell>Mail</TableCell>
                <TableCell>Telnyx</TableCell>
                <TableCell>Statut</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {users.map((user) => (
                <TableRow key={user.id}>
                  <TableCell>{user.name}</TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell>
                    {user.hasMailSettings ? (
                      <Chip label="Configuré" color="success" size="small" />
                    ) : (
                      <Chip label="Non configuré" color="default" size="small" />
                    )}
                  </TableCell>
                  <TableCell>
                    {user.hasTelnyxSettings ? (
                      <Chip label="Configuré" color="success" size="small" />
                    ) : (
                      <Chip label="Non configuré" color="default" size="small" />
                    )}
                  </TableCell>
                  <TableCell>
                    {user.isUnified ? (
                      <Chip label="Unifié" color="primary" size="small" />
                    ) : (
                      <Chip label="Non unifié" color="warning" size="small" />
                    )}
                  </TableCell>
                  <TableCell>
                    <Button 
                      variant="outlined" 
                      size="small"
                      onClick={() => handleOpenModal(user)}
                    >
                      {user.isUnified ? "Mettre à jour" : "Définir le mot de passe"}
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
      
      {selectedUser && (
        <UnifiedPasswordModal
          open={modalOpen}
          onClose={handleCloseModal}
          userId={selectedUser.id}
          userName={selectedUser.name}
        />
      )}
    </Box>
  );
};

export default UnifiedPasswordManager;
