
                    {/* Panneau arborescence retirÃ© selon demande */}
                    <div className="flex items-center gap-2 text-[10px] text-gray-600 flex-wrap">
                        <span>Si condition FAUSSE =&gt;</span>
                        <Segmented size="small" value={item.elseBehavior} onChange={(v) => { if (onUpdate) onUpdate({ ...item, elseBehavior: (v as 'zero' | 'ignore') }); }} options={[{ label: 'RÃ©sultat 0', value: 'zero' }, { label: 'Ignorer', value: 'ignore' }]} />
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                        <div className="border rounded bg-white/80 p-1">
                            <div className="relative">
                                <div className="absolute -top-3 left-1/2 -translate-x-1/2 bg-green-600/90 text-white px-2 py-0.5 rounded-full text-[10px] font-semibold pointer-events-none shadow-sm">ALORS</div>
                                <div className="formula-subdrop-zone min-h-[80px] flex flex-col gap-1 p-2"
                                    onDragOver={e => { e.preventDefault(); (e.currentTarget as HTMLDivElement).classList.add('ring', 'ring-green-300'); }}
                                    onDragLeave={e => { (e.currentTarget as HTMLDivElement).classList.remove('ring', 'ring-green-300'); }}
                                    onDrop={makeDropHandler('then')}
                                >
                                    {(item.then || []).map((sub, idx) => (
                                        <div key={idx} className="px-1 py-0.5 bg-green-50 border border-green-200 rounded flex items-center justify-between text-[10px]">
                                            <span className="truncate">{sub.label || sub.value as string}</span>
                                            <button type="button" className="text-red-500 ml-1" onClick={() => removeNested('then', idx)}>Ã—</button>
                                        </div>
                                    ))}
                                    {(item.then || []).length === 0 && (
                                        <div className="empty-state">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="empty-icon">
                                                <path d="M14 3v4a1 1 0 0 0 1 1h4" />
                                                <path d="M18 15v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h8l6 6v6z" />
                                            </svg>
                                            <p className="empty-title">DÃ©poser des Ã©lÃ©mentsâ€¦</p>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                        <div className="border rounded bg-white/80 p-1">
                            <div className="relative">
                                <div className="absolute -top-3 left-1/2 -translate-x-1/2 bg-red-600/90 text-white px-2 py-0.5 rounded-full text-[10px] font-semibold pointer-events-none shadow-sm">SINON</div>
                                <div className="formula-subdrop-zone min-h-[80px] flex flex-col gap-1 p-2"
                                    onDragOver={e => { e.preventDefault(); (e.currentTarget as HTMLDivElement).classList.add('ring', 'ring-red-300'); }}
                                    onDragLeave={e => { (e.currentTarget as HTMLDivElement).classList.remove('ring', 'ring-red-300'); }}
                                    onDrop={makeDropHandler('else')}
                                >
                                    {(item.else || []).map((sub, idx) => (
                                        <div key={idx} className="px-1 py-0.5 bg-red-50 border border-red-200 rounded flex items-center justify-between text-[10px]">
                                            <span className="truncate">{sub.label || sub.value as string}</span>
                                            <button type="button" className="text-red-500 ml-1" onClick={() => removeNested('else', idx)}>Ã—</button>
                                        </div>
                                    ))}
                                    {(item.else || []).length === 0 && (
                                        <div className="empty-state">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="empty-icon">
                                                <path d="M14 3v4a1 1 0 0 0 1 1h4" />
                                                <path d="M18 15v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h8l6 6v6z" />
                                            </svg>
                                            <p className="empty-title">DÃ©poser des Ã©lÃ©mentsâ€¦</p>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}
            {item.type === 'switch' && (
                <div className="mt-1 space-y-2">
                    <div className={`bg-white/80 border border-indigo-200 rounded p-1 text-[10px] flex flex-col gap-1 ${switchJustBound ? 'animate-pulse ring-2 ring-indigo-400' : ''}`}>
                        {switchJustBound && (
                            <div className="mb-1 px-1 py-0.5 rounded bg-green-100 text-green-700 font-semibold flex items-center gap-1">
                                âœ… Champ associÃ© au switch. Choisissez une part et ajoutez des cas.
                            </div>
                        )}
                        {(() => {
                            let fieldLabel: string | undefined;
                            if (item.switchFieldId) {
                                try {
                                    const store = useCRMStore.getState();
                                    outer: for (const b of store.blocks) for (const s of b.sections) for (const f of s.fields) { if (String(f.id) === String(item.switchFieldId)) { fieldLabel = f.label || String(f.id); break outer; } }
                                } catch { /* noop */ }
                            }
                            return (
                                <div className="flex items-center justify-between flex-wrap gap-1">
                                    <span className="font-semibold text-indigo-700 truncate max-w-[180px]">
                                        {item.switchFieldId ? `Switch sur ${fieldLabel || item.switchFieldId}` : 'Switch (glisser un champ adv_select ici)'}
                                    </span>
                                    <div className="flex items-center gap-1">
                                        {item.switchFieldId && (
                                            <div className="flex gap-1">
                                                {(['selection', 'extra', 'nodeId'] as const).map(p => (
                                                    <button key={p} type="button" className={`px-1 py-0.5 border rounded text-[9px] ${item.switchPart === p ? 'bg-indigo-500 text-white border-indigo-500' : 'bg-white hover:bg-indigo-50'}`} onClick={() => { const next = { ...item, switchPart: p } as BasicItem; onUpdate?.(next); }}>
                                                        {p}
                                                    </button>
                                                ))}
                                            </div>
                                        )}
                                        <button type="button" className="text-[9px] px-1 py-0.5 border rounded bg-white hover:bg-indigo-50 disabled:opacity-40" disabled={!item.switchFieldId} onClick={() => {
                                            if (!item.switchFieldId) return;
                                            const next = { ...item, cases: [...(item.cases || []), { value: '', seq: [] as BasicItem[] }] } as BasicItem;
                                            onUpdate?.(next);
                                        }}>+ Cas</button>
                                        {item.switchFieldId && (
                                            <button type="button" className="text-[9px] px-1 py-0.5 border rounded bg-white hover:bg-red-50" title="Changer de champ" onClick={() => {
                                                const next = { ...item, switchFieldId: undefined, cases: [], defaultSeq: [], switchPart: undefined } as BasicItem;
                                                onUpdate?.(next);
                                            }}>â†º</button>
                                        )}
                                    </div>
                                </div>
                            );
                        })()}
                        {!item.switchFieldId && (
                            <div className="border border-dashed border-indigo-300 rounded p-1 text-[10px] text-indigo-600 bg-indigo-50/50"
                                onDragOver={e => {
                                    const listed = Array.from(e.dataTransfer.types || []);
                                    const hasField = listed.includes('field-id') || listed.includes('adv-field-id');
                                    if (hasField) { e.preventDefault(); (e.currentTarget as HTMLDivElement).classList.add('ring', 'ring-indigo-300'); }
                                }}
                                onDragLeave={e => { (e.currentTarget as HTMLDivElement).classList.remove('ring', 'ring-indigo-300'); }}
                                onDrop={e => {
                                    e.preventDefault();
                                    (e.currentTarget as HTMLDivElement).classList.remove('ring', 'ring-indigo-300');
                                    const t = e.dataTransfer.getData('formula-element-type');
                                    if (t !== 'field' && t !== 'adv_part') return;
                                    if (t === 'field') {
                                        const fid = e.dataTransfer.getData('field-id') || e.dataTransfer.getData('field-value');
                                        if (!fid) return;
                                        let fieldType: string | undefined;
                                        try { const store = useCRMStore.getState(); outerF: for (const b of store.blocks) for (const s of b.sections) for (const f of s.fields) { if (String(f.id) === String(fid)) { fieldType = f.type; break outerF; } } } catch { /* noop */ }
                                        if (fieldType !== 'advanced_select') return;
                                        const next = { ...item, switchFieldId: fid, switchPart: 'selection' } as BasicItem; onUpdate?.(next);
                                    } else if (t === 'adv_part') {
                                        const fid = e.dataTransfer.getData('adv-field-id');
                                        const part = e.dataTransfer.getData('adv-part') as 'selection' | 'extra' | 'nodeId';
                                        if (!fid || !part) return;
                                        let fieldType: string | undefined;
                                        try { const store = useCRMStore.getState(); outerP: for (const b of store.blocks) for (const s of b.sections) for (const f of s.fields) { if (String(f.id) === String(fid)) { fieldType = f.type; break outerP; } } } catch { /* noop */ }
                                        if (fieldType !== 'advanced_select') return;
                                        const next = { ...item, switchFieldId: fid, switchPart: part } as BasicItem; onUpdate?.(next);
                                    }
                                }}
                            >DÃ©poser ici un champ advanced_select (ou une part) pour le baser</div>
                        )}
                        {!item.switchFieldId && (() => {
                            try {
                                const store = useCRMStore.getState();
                                const advFields: { id: string; label: string }[] = [];
                                for (const b of store.blocks) for (const s of b.sections) for (const f of s.fields) { if (f.type === 'advanced_select') advFields.push({ id: String(f.id), label: f.label || String(f.id) }); }
                                if (advFields.length === 0) return null;
                                return (
                                    <div className="flex items-center gap-1 flex-wrap">
                                        <span className="text-[9px] text-indigo-600">Ou choisir:</span>
                                        <select className="text-[10px] border rounded px-1 py-0.5" onChange={e => { const fid = e.target.value; if (!fid) return; const next = { ...item, switchFieldId: fid, switchPart: 'selection' } as BasicItem; onUpdate?.(next); }}>
                                            <option value="">-- champ --</option>
                                            {advFields.map(f => <option key={f.id} value={f.id}>{f.label}</option>)}
                                        </select>
                                    </div>
                                );
                            } catch { return null; }
                        })()}
                        {(() => {
                            const store = useCRMStore.getState();
                                            const advOptions = item.switchFieldId ? ((): { value: string; label: string }[] => {
                                                for (const b of store.blocks) for (const s of b.sections) for (const f of s.fields) { if (String(f.id) === String(item.switchFieldId)) { return (f.options || []).map((o: { value?: unknown; id?: unknown; label?: unknown }) => ({ value: String(o.value || o.id || ''), label: String(o.label || String(o.value || o.id || '')) })); } }
                                return [];
                            })() : [];
                            const addCaseValue = (val: string, label?: string) => { if (!val) return; const exists = (item.cases || []).some(c => c.value === val); if (exists) return; const next = { ...item, cases: [...(item.cases || []), { value: val, label, seq: [] as BasicItem[] }] } as BasicItem; onUpdate?.(next); };
                            return (
                                <div className="space-y-1">
                                    {item.switchFieldId && advOptions.length > 0 && (
                                        <div className="flex flex-wrap gap-1 mb-1">
                                            {advOptions.map(opt => (
                                                <button key={opt.value} type="button" className="px-1 py-0.5 border rounded bg-indigo-50 hover:bg-indigo-100 text-[9px]" onClick={() => addCaseValue(String(opt.value), opt.label)}>{opt.label}</button>
                                            ))}
                                            <button type="button" className="px-1 py-0.5 border rounded bg-green-50 hover:bg-green-100 text-[9px] font-semibold" onClick={() => {
                                                const missing = advOptions.filter(o => !(item.cases || []).some(c => c.value === o.value));
                                                if (missing.length === 0) return;
                                                const next = { ...item, cases: [...(item.cases || []), ...missing.map(m => ({ value: m.value, label: m.label, seq: [] as BasicItem[] }))] } as BasicItem;
                                                onUpdate?.(next);
                                            }}>+ Tous les cas</button>
                                        </div>
                                    )}
                                    {item.switchFieldId && advOptions.length === 0 && (
                                        <div className="text-[9px] text-indigo-500 italic mb-1">Aucune option pour ce champ (vous pouvez saisir des valeurs manuellement).</div>
                                    )}
                                    {(item.cases || []).map((c, idx) => (
                                        <div key={idx} className="border border-indigo-300 bg-indigo-50 rounded p-1">
                                            <div className="flex items-center gap-1 mb-1">
                                                <input className="h-5 px-1 text-[10px] border rounded flex-1" placeholder="Valeur exacte" value={c.value}
                                                    onChange={e => { const next = { ...item, cases: [...(item.cases || [])] } as BasicItem; next.cases![idx] = { ...c, value: (e.target as HTMLInputElement).value }; onUpdate?.(next); }} />
                                                <button type="button" className="text-red-500 text-xs" onClick={() => { const next = { ...item, cases: [...(item.cases || [])] } as BasicItem; next.cases!.splice(idx, 1); onUpdate?.(next); }}>Ã—</button>
                                            </div>
                                            <div className="min-h-[28px] text-[10px] flex flex-col gap-1 border border-dashed border-indigo-300 rounded p-1"
                                                onDragOver={e => { e.preventDefault(); }}
                                                onDrop={e => {
                                                    e.preventDefault();
                                                    const created = buildFromDataTransfer(e);
                                                    if (!created) return;
                                                    const next = { ...item, cases: [...(item.cases || [])] } as BasicItem;
                                                    const target = next.cases![idx];
                                                    target.seq = [...(target.seq || []), created];
                                                    onUpdate?.(next);
                                                }}>
                                                {(c.seq || []).length === 0 && <span className="text-gray-400">DÃ©poser Ã©lÃ©ments de calculâ€¦</span>}
                                                {(c.seq || []).length > 0 && c.seq!.map((s, i) => (
                                                    <span key={i} className="px-1 py-0.5 rounded border bg-white flex items-center gap-1">
                                                        {s.label || (s.value as string)}
                                                    </span>
                                                ))}
                                            </div>
                                        </div>
                                    ))}
                                    <div className="border border-dashed border-indigo-300 rounded p-1 min-h-[28px]"
                                        onDragOver={e => e.preventDefault()}
                                        onDrop={e => {
                                            e.preventDefault();
                                            const created = buildFromDataTransfer(e);
                                            if (!created) return;
                                            const next = { ...item, defaultSeq: [...(item.defaultSeq || []), created] } as BasicItem;
                                            onUpdate?.(next);
                                        }}>
                                        <p className="text-[9px] text-indigo-600 mb-1">DÃ©faut</p>
                                        {(item.defaultSeq || []).length === 0 && <span className="text-gray-400 text-[10px]">DÃ©poser sÃ©quence par dÃ©fautâ€¦</span>}
                                        {(item.defaultSeq || []).length > 0 && (
                                            <div className="flex flex-wrap gap-1">
                                                {item.defaultSeq!.map((s, i) => (<span key={i} className="px-1 py-0.5 rounded border bg-white text-[10px]">{s.label || (s.value as string)}</span>))}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            );
                        })()}
                    </div>
                </div>
            )}
        </div>
    );
};

export default SortableFormulaItem;


