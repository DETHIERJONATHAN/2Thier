import { Router, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { authMiddleware } from '../middlewares/auth.js';
import type { AuthenticatedRequest } from '../middlewares/auth.js';
import { z } from 'zod';
import rateLimit from 'express-rate-limit';

const router = Router();
const prisma = new PrismaClient();

// üßπ SANITISATION SIMPLE ET EFFICACE
const sanitizeString = (input: string): string => {
  return input.trim().replace(/[<>]/g, ''); // Supprime < et >
};

// üîí VALIDATION ZOD ULTRA-STRICTE
const roleCreateSchema = z.object({
  name: z.string()
    .min(2, 'Nom du r√¥le minimum 2 caract√®res')
    .max(50, 'Nom du r√¥le maximum 50 caract√®res')
    .regex(/^[a-zA-Z0-9_\-\s]+$/, 'Nom du r√¥le contient des caract√®res non autoris√©s'),
  description: z.string()
    .max(500, 'Description maximum 500 caract√®res')
    .optional(),
  organizationId: z.string()
    .uuid('ID organisation invalide')
    .optional()
});

const roleUpdateSchema = z.object({
  name: z.string()
    .min(2, 'Nom du r√¥le minimum 2 caract√®res')
    .max(50, 'Nom du r√¥le maximum 50 caract√®res')
    .regex(/^[a-zA-Z0-9_\-\s]+$/, 'Nom du r√¥le contient des caract√®res non autoris√©s')
    .optional(),
  description: z.string()
    .max(500, 'Description maximum 500 caract√®res')
    .optional()
});

const roleQuerySchema = z.object({
  // Accepter 'current' OU n'importe quelle cha√Æne non vide (IDs personnalis√©s autoris√©s)
  organizationId: z.string()
    .min(1, 'ID organisation invalide')
    .optional()
});

// üõ°Ô∏è RATE LIMITING ADAPT√â
const rolesRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // 100 requ√™tes max (lecture fr√©quente)
  message: { 
    success: false, 
    message: 'Trop de requ√™tes sur les r√¥les, r√©essayez plus tard' 
  },
  standardHeaders: true,
  legacyHeaders: false
});

const rolesCreateRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes  
  max: 10, // 10 cr√©ations max
  message: { 
    success: false, 
    message: 'Trop de cr√©ations de r√¥les, r√©essayez plus tard' 
  }
});

// üîß GESTION ERREURS ZOD CENTRALIS√âE
const handleZodError = (error: z.ZodError) => {
  return {
    success: false,
    message: 'Donn√©es invalides',
    errors: error.errors.map(e => `${e.path.join('.')}: ${e.message}`)
  };
};

// Appliquer l'authentification et rate limiting
router.use(authMiddleware);
router.use(rolesRateLimit);

// üè∑Ô∏è GET /api/roles - S√âCURIS√â AVEC ZOD + SANITISATION
router.get('/', async (req: AuthenticatedRequest, res) => {
  console.log('[ROLES] GET /roles - R√©cup√©ration des r√¥les S√âCURIS√âE');
  
  try {
    // üîç VALIDATION ZOD QUERY PARAMS
    const queryValidation = roleQuerySchema.safeParse(req.query);
    if (!queryValidation.success) {
      console.log('[ROLES] Validation √©chou√©e:', queryValidation.error);
      res.status(400).json(handleZodError(queryValidation.error));
      return;
    }

    const { organizationId } = queryValidation.data;
    const requestingUser = req.user;
    
    console.log(`[ROLES] User role: ${requestingUser?.role}`);
    console.log(`[ROLES] Organization ID: ${organizationId || requestingUser?.organizationId}`);
    
    // ‚úÖ LOGIQUE UNIFI√âE ET CORRIG√âE
    let finalOrganizationId: string | undefined | null = organizationId;
    if (organizationId === 'current') {
      finalOrganizationId = requestingUser?.organizationId;
    }

  const whereClause: Record<string, unknown> = {};

    // Si un ID d'organisation est sp√©cifi√© (et r√©solu), on retourne:
    // 1. Les r√¥les sp√©cifiques √† cette organisation
    // 2. Les r√¥les globaux (organizationId: null)
    if (finalOrganizationId) {
      whereClause.OR = [
        { organizationId: finalOrganizationId },
        { organizationId: null } // R√¥les globaux
      ];
    }
    
    // Si l'utilisateur n'est PAS super_admin, on force le filtrage sur son organisation
    // pour des raisons de s√©curit√©, √©crasant tout autre filtre.
    if (requestingUser?.role !== 'super_admin') {
      whereClause.OR = [
        { organizationId: requestingUser?.organizationId },
        { organizationId: null } // R√¥les globaux toujours disponibles
      ];
      console.log(`[ROLES] Non-SuperAdmin: Filtering for org ${requestingUser?.organizationId} + global roles`);
    }

    // Si aucun filtre d'organisation n'est sp√©cifi√© et que c'est un super_admin,
    // retourner tous les r√¥les (globaux et sp√©cifiques)
    if (!finalOrganizationId && requestingUser?.role === 'super_admin') {
      // Pas de filtre - retourner tous les r√¥les
      console.log('[ROLES] SuperAdmin: Returning all roles (global and organization-specific)');
    }

    console.log('[ROLES] Final where clause:', whereClause);

    const roles = await prisma.role.findMany({
      where: whereClause,
      include: {
        Permission: true,
        Organization: true
      },
      orderBy: { name: 'asc' }
    });
      
    console.log(`[ROLES] Found ${roles.length} total roles based on filter.`);
    res.status(200).json({ success: true, data: roles });
    return;
    
  } catch (error: unknown) {
    console.error('[ROLES] Erreur lors de la r√©cup√©ration des r√¥les:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur interne lors de la r√©cup√©ration des r√¥les' 
    });
  }
});

// üè∑Ô∏è GET /api/roles/:id - R√âCUP√âRER UN R√îLE S√âCURIS√â
router.get('/:id', async (req: AuthenticatedRequest, res: Response): Promise<void> => {
  const { id } = req.params;
  console.log(`[ROLES] GET /roles/${id} - R√©cup√©ration du r√¥le S√âCURIS√âE`);
  
  try {
    // üîí VALIDATION ZOD PARAMS
    if (!id || typeof id !== 'string' || id.trim() === '') {
      res.status(400).json({
        success: false,
        message: 'ID du r√¥le invalide'
      });
      return;
    }

    if (!req.user) {
      res.status(401).json({ 
        success: false, 
        message: "Utilisateur non authentifi√©" 
      });
      return;
    }

    const requestingUser = req.user;
    const sanitizedId = sanitizeString(id.trim());

    // üîç R√âCUP√âRATION S√âCURIS√âE DU R√îLE
    const role = await prisma.role.findUnique({
      where: { id: sanitizedId },
      include: {
        Permission: true,
        UserOrganizations: {
          include: {
            Organization: true,
            User: {
              select: { id: true, firstName: true, lastName: true, email: true }
            }
          }
        },
        Organization: true
      }
    });

    if (!role) {
      res.status(404).json({ 
        success: false, 
        message: "R√¥le non trouv√©" 
      });
      return;
    }

    // üîê V√âRIFICATION PERMISSIONS RENFORC√âE
    if (requestingUser.role !== 'super_admin') {
      if (!requestingUser.organizationId || role.organizationId !== requestingUser.organizationId) {
        res.status(403).json({ 
          success: false, 
          message: "Acc√®s refus√©: vous ne pouvez voir que les r√¥les de votre organisation" 
        });
        return;
      }
    }

    console.log(`[ROLES] R√¥le "${role.name}" r√©cup√©r√© avec succ√®s`);
    res.json({ 
      success: true, 
      data: role 
    });

  } catch (error) {
    console.error('[ROLES] Error fetching role:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur interne du serveur' 
    });
  }
});

// POST /api/roles - Cr√©er un nouveau r√¥le
// üè∑Ô∏è POST /api/roles - CR√âER UN R√îLE S√âCURIS√â
router.post('/', rolesCreateRateLimit, async (req: AuthenticatedRequest, res: Response): Promise<void> => {
  console.log('[ROLES] POST /roles - Cr√©ation d\'un r√¥le S√âCURIS√âE');
  
  try {
    // üîí VALIDATION ZOD ULTRA-STRICTE
    const bodyValidation = roleCreateSchema.safeParse(req.body);
    if (!bodyValidation.success) {
      console.log('[ROLES] Validation cr√©ation √©chou√©e:', bodyValidation.error);
      res.status(400).json(handleZodError(bodyValidation.error));
      return;
    }

    if (!req.user) {
      res.status(401).json({ 
        success: false, 
        message: "Utilisateur non authentifi√©" 
      });
      return;
    }

    const requestingUser = req.user;
    const { name, description, organizationId } = bodyValidation.data;

    // üßπ SANITISATION DES ENTR√âES
    const sanitizedName = sanitizeString(name);
    const sanitizedDescription = description ? sanitizeString(description) : '';

    console.log(`[ROLES] Cr√©ation r√¥le: ${sanitizedName} pour org: ${organizationId || requestingUser.organizationId}`);

    // üîê V√âRIFICATION PERMISSIONS RENFORC√âE
    if (requestingUser.role !== 'super_admin') {
      const targetOrgId = organizationId || requestingUser.organizationId;
      
      if (!requestingUser.organizationId || requestingUser.organizationId !== targetOrgId) {
        res.status(403).json({ 
          success: false, 
          message: "Acc√®s refus√©: vous ne pouvez cr√©er des r√¥les que pour votre organisation" 
        });
        return;
      }
    }

    // üîç V√âRIFIER UNICIT√â DU NOM DANS L'ORGANISATION
    const finalOrgId = organizationId || requestingUser.organizationId;
    const existingRole = await prisma.role.findFirst({
      where: {
        name: sanitizedName,
        organizationId: finalOrgId
      }
    });

    if (existingRole) {
      res.status(409).json({
        success: false,
        message: `Un r√¥le avec le nom "${sanitizedName}" existe d√©j√† dans cette organisation`
      });
      return;
    }

    // üö´ Interdire la cr√©ation d'un r√¥le r√©serv√© "super_admin"
    if (sanitizedName === 'super_admin') {
      res.status(400).json({
        success: false,
        message: 'Le nom de r√¥le "super_admin" est r√©serv√© et ne peut pas √™tre cr√©√©.'
      });
      return;
    }

    const newRole = await prisma.role.create({
      data: {
        id: `role_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        name: sanitizedName,
        label: sanitizedName,
        description: sanitizedDescription,
        organizationId: finalOrgId,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      include: {
        UserOrganizations: {
          include: {
            Organization: true,
            User: true
          }
        },
        Organization: true
      }
    });

    console.log(`[ROLES] R√¥le cr√©√© avec succ√®s: ${newRole.id}`);
    res.status(201).json({ 
      success: true, 
      data: newRole,
      message: `R√¥le "${sanitizedName}" cr√©√© avec succ√®s`
    });

  } catch (error) {
    console.error('[ROLES] Error creating role:', error);
    res.status(500).json({ success: false, message: 'Erreur interne du serveur' });
  }
});

// PUT /api/roles/:id - Mettre √† jour un r√¥le
// üè∑Ô∏è PUT /api/roles/:id - MODIFIER UN R√îLE S√âCURIS√â  
router.put('/:id', async (req: AuthenticatedRequest, res: Response): Promise<void> => {
  const { id } = req.params;
  console.log(`[ROLES] PUT /roles/${id} - Mise √† jour du r√¥le S√âCURIS√âE`);
  
  try {
    // üîí VALIDATION ZOD PARAMS + BODY
    if (!id || typeof id !== 'string' || id.trim() === '') {
      res.status(400).json({
        success: false,
        message: 'ID du r√¥le invalide'
      });
      return;
    }

    const bodyValidation = roleUpdateSchema.safeParse(req.body);
    if (!bodyValidation.success) {
      console.log('[ROLES] Validation modification √©chou√©e:', bodyValidation.error);
      res.status(400).json(handleZodError(bodyValidation.error));
      return;
    }

    if (!req.user) {
      res.status(401).json({ 
        success: false, 
        message: "Utilisateur non authentifi√©" 
      });
      return;
    }

    const requestingUser = req.user;
    const { name, description } = bodyValidation.data;

    // üßπ SANITISATION DES ENTR√âES
    const sanitizedName = name ? sanitizeString(name) : undefined;
    const sanitizedDescription = description ? sanitizeString(description) : undefined;

    // üîç V√âRIFIER EXISTENCE DU R√îLE
    const existingRole = await prisma.role.findUnique({
      where: { id: id.trim() }
    });

    if (!existingRole) {
      res.status(404).json({ 
        success: false, 
        message: "R√¥le non trouv√©" 
      });
      return;
    }

    // üîê V√âRIFICATION PERMISSIONS RENFORC√âE
    if (requestingUser.role !== 'super_admin') {
      if (!requestingUser.organizationId || existingRole.organizationId !== requestingUser.organizationId) {
        res.status(403).json({ 
          success: false, 
          message: "Acc√®s refus√©: vous ne pouvez modifier que les r√¥les de votre organisation" 
        });
        return;
      }
    }

    // ÔøΩ Interdire toute modification du r√¥le r√©serv√© "super_admin" (coh√©rent avec l'UI)
    if (existingRole.name === 'super_admin') {
      res.status(403).json({
        success: false,
        message: 'Le r√¥le "super_admin" est prot√©g√© et ne peut pas √™tre modifi√©.'
      });
      return;
    }

    // ÔøΩüîç V√âRIFIER UNICIT√â DU NOUVEAU NOM (SI CHANG√â)
    if (sanitizedName && sanitizedName !== existingRole.name) {
      const duplicateRole = await prisma.role.findFirst({
        where: {
          name: sanitizedName,
          organizationId: existingRole.organizationId,
          id: { not: id.trim() }
        }
      });

      if (duplicateRole) {
        res.status(409).json({
          success: false,
          message: `Un r√¥le avec le nom "${sanitizedName}" existe d√©j√† dans cette organisation`
        });
        return;
      }
    }

    // üìù CONSTRUIRE LES DONN√âES √Ä METTRE √Ä JOUR
    const updateData: {
      updatedAt: Date;
      name?: string;
      label?: string;
      description?: string;
    } = {
      updatedAt: new Date()
    };

    if (sanitizedName !== undefined) {
      updateData.name = sanitizedName;
      updateData.label = sanitizedName; // Synchroniser label avec name
    }

    if (sanitizedDescription !== undefined) {
      updateData.description = sanitizedDescription;
    }

    const updatedRole = await prisma.role.update({
      where: { id: id.trim() },
      data: updateData,
      include: {
        UserOrganizations: {
          include: {
            Organization: true,
            User: true
          }
        },
        Organization: true
      }
    });

    console.log(`[ROLES] R√¥le modifi√© avec succ√®s: ${updatedRole.id}`);
    res.status(200).json({ 
      success: true, 
      data: updatedRole,
      message: 'R√¥le modifi√© avec succ√®s'
    });

  } catch (error) {
    console.error('[ROLES] Erreur lors de la modification du r√¥le:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur interne lors de la modification du r√¥le' 
    });
  }
});

// DELETE /api/roles/:id - Supprimer un r√¥le
// üè∑Ô∏è DELETE /api/roles/:id - SUPPRIMER UN R√îLE S√âCURIS√â
router.delete('/:id', async (req: AuthenticatedRequest, res: Response): Promise<void> => {
  const { id } = req.params;
  console.log(`[ROLES] DELETE /roles/${id} - Suppression du r√¥le S√âCURIS√âE`);
  
  try {
    // üîí VALIDATION PARAMS
    if (!id || typeof id !== 'string' || id.trim() === '') {
      res.status(400).json({
        success: false,
        message: 'ID du r√¥le invalide'
      });
      return;
    }

    if (!req.user) {
      res.status(401).json({ 
        success: false, 
        message: "Utilisateur non authentifi√©" 
      });
      return;
    }

    const requestingUser = req.user;
    const roleId = id.trim();

    // üîç V√âRIFIER EXISTENCE DU R√îLE
    const existingRole = await prisma.role.findUnique({
      where: { id: roleId },
      include: {
        UserOrganizations: true // Pour v√©rifier s'il y a des utilisateurs assign√©s
      }
    });

    if (!existingRole) {
      res.status(404).json({ 
        success: false, 
        message: "R√¥le non trouv√©" 
      });
      return;
    }

    // üîê V√âRIFICATION PERMISSIONS RENFORC√âE
    if (requestingUser.role !== 'super_admin') {
      if (!requestingUser.organizationId || existingRole.organizationId !== requestingUser.organizationId) {
        res.status(403).json({ 
          success: false, 
          message: "Acc√®s refus√©: vous ne pouvez supprimer que les r√¥les de votre organisation" 
        });
        return;
      }
    }

    // üö´ Interdire la suppression du r√¥le r√©serv√© "super_admin" (s√©curit√© syst√®me)
    if (existingRole.name === 'super_admin') {
      res.status(400).json({
        success: false,
        message: 'Le r√¥le "super_admin" est prot√©g√© et ne peut pas √™tre supprim√©.'
      });
      return;
    }

    // ‚ö†Ô∏è V√âRIFIER QU'AUCUN UTILISATEUR N'EST ASSIGN√â
    if (existingRole.UserOrganizations && existingRole.UserOrganizations.length > 0) {
      res.status(409).json({
        success: false,
        message: `Impossible de supprimer le r√¥le "${existingRole.name}": ${existingRole.UserOrganizations.length} utilisateur(s) y sont encore assign√©(s)`
      });
      return;
    }

    // üóëÔ∏è SUPPRESSION S√âCURIS√âE
    await prisma.role.delete({
      where: { id: roleId }
    });

    console.log(`[ROLES] R√¥le supprim√© avec succ√®s: ${roleId} (${existingRole.name})`);
    res.status(200).json({ 
      success: true, 
      message: `R√¥le "${existingRole.name}" supprim√© avec succ√®s` 
    });

  } catch (error) {
    console.error('[ROLES] Erreur lors de la suppression du r√¥le:', error);
    res.status(500).json({ success: false, message: 'Erreur interne du serveur' });
  }
});

export default router;
