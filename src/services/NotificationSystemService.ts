/**
 * üöÄ SERVICE D'INITIALISATION DU SYST√àME DE NOTIFICATIONS COMPLET
 * 
 * Ce service d√©marre et coordonne tous les services de notifications :
 * - UniversalNotificationService (notifications tous types)
 * - RealTimeEmailNotificationService (emails temps r√©el)
 * - AutoMailSyncService (synchronisation emails)
 */

import UniversalNotificationService from './UniversalNotificationService.js';
import RealTimeEmailNotificationService from './RealTimeEmailNotificationService.js';
import { autoMailSync } from './AutoMailSyncService.js';

export class NotificationSystemService {
  private static instance: NotificationSystemService;
  private isStarted = false;

  private constructor() {}

  static getInstance(): NotificationSystemService {
    if (!this.instance) {
      this.instance = new NotificationSystemService();
    }
    return this.instance;
  }

  /**
   * üöÄ D√âMARRER TOUT LE SYST√àME DE NOTIFICATIONS
   */
  async start(): Promise<void> {
    if (this.isStarted) {
      console.log('‚ö†Ô∏è [NotificationSystem] Syst√®me d√©j√† d√©marr√©');
      return;
    }

    console.log('üåü [NotificationSystem] D√©marrage du syst√®me de notifications complet...');

    try {
      // 1. üåü D√©marrer le service universel
      console.log('1Ô∏è‚É£ [NotificationSystem] D√©marrage UniversalNotificationService...');
      const universalService = UniversalNotificationService.getInstance();
      universalService.start();

      // 2. üìß D√©marrer le service de notifications email temps r√©el
      console.log('2Ô∏è‚É£ [NotificationSystem] D√©marrage RealTimeEmailNotificationService...');
      const emailNotificationService = RealTimeEmailNotificationService.getInstance();
      emailNotificationService.start();

      // 3. üîÑ D√©marrer la synchronisation email automatique
      console.log('3Ô∏è‚É£ [NotificationSystem] D√©marrage AutoMailSyncService...');
      await autoMailSync.start();

      // 4. üîó Connecter les services entre eux
      this.setupServiceConnections();

      this.isStarted = true;
      console.log('‚úÖ [NotificationSystem] Syst√®me de notifications complet d√©marr√© avec succ√®s !');

      // 5. üìä Afficher le statut
      this.logSystemStatus();

    } catch (error) {
      console.error('‚ùå [NotificationSystem] Erreur lors du d√©marrage:', error);
      throw error;
    }
  }

  /**
   * üîó CONNECTER LES SERVICES ENTRE EUX
   */
  private setupServiceConnections(): void {
    console.log('üîó [NotificationSystem] Configuration des connexions inter-services...');

    // √âcouter les √©v√©nements de nouveaux emails depuis AutoMailSyncService
    const emailNotificationService = RealTimeEmailNotificationService.getInstance();
    
    // Quand AutoMailSyncService trouve un nouveau email, d√©clencher une notification
    autoMailSync.on('newEmailFound', (emailData) => {
      console.log('üéØ [NotificationSystem] Nouvel email d√©tect√©, cr√©ation notification...');
      emailNotificationService.notifyNewEmail(emailData);
    });

    console.log('‚úÖ [NotificationSystem] Connexions inter-services configur√©es');
  }

  /**
   * üìä AFFICHER LE STATUT DU SYST√àME
   */
  private logSystemStatus(): void {
    console.log('\nüéØ [NotificationSystem] STATUT DU SYST√àME :');
    console.log('=' .repeat(50));
    console.log('‚úÖ UniversalNotificationService : ACTIF');
    console.log('‚úÖ RealTimeEmailNotificationService : ACTIF');
    console.log('‚úÖ AutoMailSyncService : ACTIF');
    console.log('‚úÖ Connexions inter-services : CONFIGUR√âES');
    console.log('=' .repeat(50));
    console.log('üîî Le syst√®me de notifications est op√©rationnel !\n');
  }

  /**
   * üõë ARR√äTER TOUT LE SYST√àME
   */
  async stop(): Promise<void> {
    if (!this.isStarted) {
      console.log('‚ö†Ô∏è [NotificationSystem] Syst√®me d√©j√† arr√™t√©');
      return;
    }

    console.log('üõë [NotificationSystem] Arr√™t du syst√®me de notifications...');

    try {
      // Arr√™ter tous les services
      const universalService = UniversalNotificationService.getInstance();
      universalService.stop();

      const emailNotificationService = RealTimeEmailNotificationService.getInstance();
      emailNotificationService.stop();

      await autoMailSync.stop();

      this.isStarted = false;
      console.log('‚úÖ [NotificationSystem] Syst√®me de notifications arr√™t√©');

    } catch (error) {
      console.error('‚ùå [NotificationSystem] Erreur lors de l\'arr√™t:', error);
    }
  }

  /**
   * üìã OBTENIR LE STATUT DU SYST√àME
   */
  getStatus(): object {
    return {
      isStarted: this.isStarted,
      services: {
        universal: this.isStarted,
        emailRealTime: this.isStarted,
        autoSync: this.isStarted
      },
      startedAt: this.isStarted ? new Date().toISOString() : null
    };
  }
}

export default NotificationSystemService;
