import { PrismaClient } from '@prisma/client';
import { GoogleWorkspaceService } from './GoogleWorkspaceService.js';
import { decrypt } from '../utils/crypto.js';

const prisma = new PrismaClient();

/**
 * Service d'int√©gration automatique pour Google Workspace
 * Cr√©e automatiquement des comptes Google Workspace quand de nouveaux utilisateurs CRM sont cr√©√©s
 */
export class GoogleWorkspaceIntegrationService {
  private static instance: GoogleWorkspaceIntegrationService | null = null;
  private googleWorkspaceService: GoogleWorkspaceService | null = null;
  private isInitialized = false;

  private constructor() {}

  static getInstance(): GoogleWorkspaceIntegrationService {
    if (!this.instance) {
      this.instance = new GoogleWorkspaceIntegrationService();
    }
    return this.instance;
  }

  /**
   * Initialise le service avec la configuration Google Workspace
   */
  async initialize(): Promise<boolean> {
    try {
      const config = await prisma.googleWorkspaceConfig.findFirst({
        where: { isActive: true }
      });

      if (!config) {
        console.log('‚ö†Ô∏è [GoogleWorkspaceIntegration] Aucune configuration Google Workspace trouv√©e');
        this.isInitialized = false;
        return false;
      }

      // D√©chiffrer la configuration
      const decryptedConfig = {
        clientId: config.clientId,
        clientSecret: decrypt(config.clientSecret),
        domain: config.domain,
        adminEmail: config.adminEmail,
        serviceAccountEmail: config.serviceAccountEmail,
        privateKey: decrypt(config.privateKey),
        isActive: config.isActive
      };

      this.googleWorkspaceService = new GoogleWorkspaceService(decryptedConfig);
      this.isInitialized = true;
      
      console.log('‚úÖ [GoogleWorkspaceIntegration] Service initialis√© avec succ√®s');
      return true;
    } catch (error) {
      console.error('‚ùå [GoogleWorkspaceIntegration] Erreur initialisation:', error);
      this.isInitialized = false;
      return false;
    }
  }

  /**
   * Cr√©e automatiquement un compte Google Workspace pour un utilisateur CRM
   */
  async createWorkspaceUserForCrmUser(crmUser: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    organizationId?: string;
  }): Promise<{ success: boolean; workspaceUser?: any; error?: string }> {
    try {
      console.log(`üöÄ [GoogleWorkspaceIntegration] Cr√©ation compte Workspace pour ${crmUser.email}...`);

      // V√©rifier si le service est initialis√©
      if (!this.isInitialized || !this.googleWorkspaceService) {
        const initialized = await this.initialize();
        if (!initialized) {
          return {
            success: false,
            error: 'Service Google Workspace non configur√©'
          };
        }
      }

      // G√©n√©rer un mot de passe temporaire s√©curis√©
      const tempPassword = this.generateSecurePassword();

      // Cr√©er l'utilisateur Google Workspace
      const result = await this.googleWorkspaceService!.createUser({
        firstName: crmUser.firstName,
        lastName: crmUser.lastName,
        email: crmUser.email,
        password: tempPassword
      });

      if (result.success) {
        // Optionnel : Sauvegarder les informations de compte Workspace dans la DB
        await this.saveWorkspaceUserInfo(crmUser.id, {
          workspaceUserId: (result.user as any)?.id || 'unknown',
          email: crmUser.email,
          tempPassword: tempPassword, // √Ä chiffrer en production
          createdAt: new Date()
        });

        console.log(`‚úÖ [GoogleWorkspaceIntegration] Compte Workspace cr√©√© pour ${crmUser.email}`);
        
        // TODO: Envoyer un email de bienvenue avec les informations de connexion
        await this.sendWelcomeEmail(crmUser, tempPassword);

        return {
          success: true,
          workspaceUser: result.user
        };
      } else {
        console.error(`‚ùå [GoogleWorkspaceIntegration] √âchec cr√©ation compte pour ${crmUser.email}:`, result.error);
        return {
          success: false,
          error: result.error || 'Erreur inconnue lors de la cr√©ation du compte'
        };
      }
    } catch (error) {
      console.error('‚ùå [GoogleWorkspaceIntegration] Erreur cr√©ation utilisateur:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  /**
   * V√©rifie si l'int√©gration Google Workspace est active
   */
  async isIntegrationActive(): Promise<boolean> {
    try {
      const config = await prisma.googleWorkspaceConfig.findFirst({
        where: { isActive: true }
      });
      return !!config;
    } catch (error) {
      console.error('‚ùå [GoogleWorkspaceIntegration] Erreur v√©rification statut:', error);
      return false;
    }
  }

  /**
   * Met √† jour le mot de passe d'un utilisateur Google Workspace
   */
  async updateUserPassword(email: string, newPassword: string): Promise<{ success: boolean; error?: string }> {
    try {
      if (!this.isInitialized || !this.googleWorkspaceService) {
        const initialized = await this.initialize();
        if (!initialized) {
          return {
            success: false,
            error: 'Service Google Workspace non configur√©'
          };
        }
      }

      return await this.googleWorkspaceService!.updateUserPassword(email, newPassword);
    } catch (error) {
      console.error('‚ùå [GoogleWorkspaceIntegration] Erreur mise √† jour mot de passe:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  /**
   * G√©n√®re un mot de passe s√©curis√© temporaire
   */
  private generateSecurePassword(): string {
    const length = 16;
    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
    let password = '';
    
    // Assurer au moins un caract√®re de chaque type
    password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)]; // Majuscule
    password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)]; // Minuscule
    password += '0123456789'[Math.floor(Math.random() * 10)]; // Chiffre
    password += '!@#$%^&*'[Math.floor(Math.random() * 8)]; // Caract√®re sp√©cial
    
    // Compl√©ter avec des caract√®res al√©atoires
    for (let i = password.length; i < length; i++) {
      password += charset[Math.floor(Math.random() * charset.length)];
    }
    
    // M√©langer les caract√®res
    return password.split('').sort(() => Math.random() - 0.5).join('');
  }

  /**
   * Sauvegarde les informations du compte Workspace dans la DB
   */
  private async saveWorkspaceUserInfo(crmUserId: string, workspaceInfo: {
    workspaceUserId?: string;
    email: string;
    tempPassword: string;
    createdAt: Date;
  }): Promise<void> {
    try {
      // TODO: Cr√©er une table WorkspaceAccount ou √©tendre EmailAccount
      console.log(`üíæ [GoogleWorkspaceIntegration] Sauvegarde infos Workspace pour user ${crmUserId}`, workspaceInfo);
      
      // Pour l'instant, on peut utiliser la table EmailAccount existante
      // ou cr√©er une nouvelle table sp√©cifique Google Workspace
    } catch (error) {
      console.error('‚ùå [GoogleWorkspaceIntegration] Erreur sauvegarde infos Workspace:', error);
    }
  }

  /**
   * Envoie un email de bienvenue avec les informations de connexion
   */
  private async sendWelcomeEmail(user: {
    firstName: string;
    lastName: string;
    email: string;
  }, _tempPassword: string): Promise<void> {
    try {
      console.log(`üìß [GoogleWorkspaceIntegration] Envoi email de bienvenue √† ${user.email}`);
      
      // TODO: Impl√©menter l'envoi d'email avec les informations de connexion
      // const emailContent = `
      //   Bonjour ${user.firstName} ${user.lastName},
      //   
      //   Votre compte Google Workspace a √©t√© cr√©√© avec succ√®s !
      //   
      //   Email: ${user.email}
      //   Mot de passe temporaire: ${tempPassword}
      //   
      //   Veuillez vous connecter et changer votre mot de passe d√®s que possible.
      //   
      //   Acc√®s Gmail: https://gmail.com
      //   Acc√®s Google Drive: https://drive.google.com
      //   
      //   Cordialement,
      //   L'√©quipe CRM
      // `;
      
      // await emailService.sendEmail({
      //   to: user.email,
      //   subject: 'Bienvenue - Votre compte Google Workspace est pr√™t',
      //   content: emailContent
      // });
      
    } catch (error) {
      console.error('‚ùå [GoogleWorkspaceIntegration] Erreur envoi email de bienvenue:', error);
    }
  }
}

// Export d'une instance singleton
export const googleWorkspaceIntegration = GoogleWorkspaceIntegrationService.getInstance();
