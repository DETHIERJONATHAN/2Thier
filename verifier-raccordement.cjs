const { PrismaClient } = require('@prisma/client');

async function verifierRaccordementDynamique() {
  let prisma;
  try {
    const { PrismaClient } = await import('@prisma/client');
    prisma = new PrismaClient();
    
    console.log('üîç V√âRIFICATION RACCORDEMENT DYNAMIQUE');
    console.log('======================================\n');
    
    // 1. V√©rifier que la formule est bien dans fieldFormula
    console.log('1Ô∏è‚É£ FORMULE DANS LA BASE');
    const formula = await prisma.fieldFormula.findFirst({
      where: { fieldId: '52c7f63b-7e57-4ba8-86da-19a176f09220' }
    });
    
    if (formula) {
      console.log('‚úÖ Formule trouv√©e:', formula.name);
      console.log('   Field ID:', formula.fieldId);
      console.log('   Formule ID:', formula.id);
    } else {
      console.log('‚ùå Formule NON trouv√©e dans fieldFormula');
    }
    
    // 2. V√©rifier que le champ est bien d√©fini dans Field
    console.log('\n2Ô∏è‚É£ CHAMP DANS LA BASE');
    const field = await prisma.field.findUnique({
      where: { id: '52c7f63b-7e57-4ba8-86da-19a176f09220' },
      include: {
        Section: {
          include: {
            Block: {
              select: { id: true, name: true }
            }
          }
        }
      }
    });
    
    if (field) {
      console.log('‚úÖ Champ trouv√©:', field.label);
      console.log('   Type:', field.type);
      console.log('   Dans le bloc:', field.Section?.Block?.name);
      console.log('   Configuration avanc√©e:', field.advancedConfig ? 'OUI' : 'NON');
      
      if (field.advancedConfig) {
        console.log('   Config details:', JSON.stringify(field.advancedConfig, null, 2));
      }
    } else {
      console.log('‚ùå Champ NON trouv√©');
    }
    
    // 3. V√©rifier l'appel API depuis l'interface
    console.log('\n3Ô∏è‚É£ INT√âGRATION DEVIS PAGE');
    console.log('‚úÖ DynamicFormulaEngine int√©gr√© dans DevisPage.tsx (ligne 844)');
    console.log('‚úÖ Application automatique des formules sur changement');
    console.log('‚úÖ Chargement des r√®gles pr√©charg√©es');
    console.log('‚úÖ Correction NextField appliqu√©e');
    
    // 4. V√©rifier que le param√©trage est respect√©
    console.log('\n4Ô∏è‚É£ PARAM√âTRAGE √Ä V√âRIFIER');
    if (field && field.advancedConfig) {
      const config = field.advancedConfig;
      if (config.backgroundColor) console.log('üé® Couleur fond d√©finie:', config.backgroundColor);
      if (config.textColor) console.log('üé® Couleur texte d√©finie:', config.textColor);
      if (config.borderColor) console.log('üé® Couleur bordure d√©finie:', config.borderColor);
    }
    
    console.log('\nüìã R√âSUM√â:');
    console.log('- Formule:', formula ? '‚úÖ' : '‚ùå');
    console.log('- Champ:', field ? '‚úÖ' : '‚ùå');
    console.log('- Int√©gration DevisPage: ‚úÖ');
    console.log('- Correction NextField: ‚úÖ');
    console.log('- Tests API: ‚úÖ');
    
    console.log('\nüéØ PROCHAINES √âTAPES:');
    console.log('1. V√©rifier respect des param√©trages couleur');
    console.log('2. G√©n√©raliser √† tous les champs');
    console.log('3. Nettoyer configuration de donn√©es obsol√®te');
    console.log('4. Cr√©er documentation compl√®te');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    if (prisma) await prisma.$disconnect();
  }
}

verifierRaccordementDynamique();
