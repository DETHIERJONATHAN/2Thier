#!/usr/bin/env node
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function listerTousLesArbres() {
  console.log('üîç === LISTE DE TOUS LES ARBRES ===\n');

  try {
    const allTrees = await prisma.treeBranchLeafTree.findMany({
      select: {
        id: true,
        name: true,
        description: true,
        category: true
      },
      orderBy: { name: 'asc' }
    });

    console.log(`üìä Total arbres trouv√©s: ${allTrees.length}\n`);

    allTrees.forEach((tree, index) => {
      console.log(`${index + 1}. üå≥ "${tree.name}"`);
      console.log(`   üìù ID: ${tree.id}`);
      console.log(`   üìù Description: ${tree.description || 'Aucune'}`);
      console.log(`   üìù Cat√©gorie: ${tree.category || 'Aucune'}`);
      console.log('');
    });

    // Chercher sp√©cifiquement ceux qui contiennent "√©lectr" (insensible √† la casse)
    const arbresElectr = allTrees.filter(tree => 
      tree.name.toLowerCase().includes('√©lectr') || 
      tree.name.toLowerCase().includes('electr') ||
      (tree.description && tree.description.toLowerCase().includes('√©lectr')) ||
      (tree.description && tree.description.toLowerCase().includes('electr'))
    );

    console.log(`üîç Arbres contenant "√©lectr": ${arbresElectr.length}`);
    arbresElectr.forEach(tree => {
      console.log(`  ‚ö° "${tree.name}" (ID: ${tree.id})`);
    });

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

listerTousLesArbres();