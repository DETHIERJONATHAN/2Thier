const { PrismaClient } = require('@prisma/client');

async function analyserElement() {
  const prisma = new PrismaClient();
  try {
    // Trouver l'√©l√©ment sp√©cifique
    const element = await prisma.treeBranchLeafNode.findUnique({
      where: { id: '10bfb6d2-67ae-49a8-8d49-fc6dafa3f74e' },
      include: {
        TreeBranchLeafNode: true, // Parent
      }
    });
    
    if (!element) {
      console.log('‚ùå √âl√©ment non trouv√©');
      return;
    }
    
    console.log('üîç ANALYSE DE L\'√âL√âMENT PROBL√âMATIQUE:');
    console.log('='.repeat(50));
    console.log(`üìã √âl√©ment: "${element.label}"`);
    console.log(`üÜî ID: ${element.id}`);
    console.log(`üìÇ Type: ${element.type}`);
    console.log(`üè∑Ô∏è Code TBL actuel: ${element.tbl_code} (Type:${element.tbl_type}, Capacit√©:${element.tbl_capacity})`);
    console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Parent ID: ${element.parentId}`);
    
    if (element.parentId) {
      const parent = await prisma.treeBranchLeafNode.findUnique({
        where: { id: element.parentId }
      });
      
      console.log(`\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ PARENT:`);
      console.log(`   Label: "${parent?.label}"`);
      console.log(`   Type: ${parent?.type}`);
      console.log(`   Code TBL: ${parent?.tbl_code}`);
      
      // V√©rifier si le parent est une section
      const estDansSection = parent?.type === 'section';
      console.log(`\nüéØ DIAGNOSTIC:`);
      console.log(`   Parent est une section: ${estDansSection ? 'OUI ‚úÖ' : 'NON ‚ùå'}`);
      
      if (estDansSection) {
        const nouveauType = '6'; // Champ Donn√©es
        const capacite = element.tbl_capacity;
        const nomCourt = element.tbl_code?.substring(2) || 'data';
        const nouveauCode = `${nouveauType}${capacite}${nomCourt}`;
        
        console.log(`   ‚û°Ô∏è  CORRECTION N√âCESSAIRE:`);
        console.log(`   ‚ùå Actuel: ${element.tbl_code} (Type ${element.tbl_type} = Champ simple)`);
        console.log(`   ‚úÖ Correct: ${nouveauCode} (Type ${nouveauType} = Champ Donn√©es)`);
        console.log(`\nüîß VOUS AVEZ RAISON ! Cet √©l√©ment doit √™tre un 6${capacite}, pas un 3${capacite}`);
      } else {
        console.log(`   ‚úÖ Code TBL correct pour un champ hors section`);
      }
    }
    
    // V√©rifier combien d'autres √©l√©ments ont le m√™me probl√®me
    console.log(`\nüîç RECHERCHE D'AUTRES PROBL√àMES SIMILAIRES:`);
    const champsEnSection = await prisma.treeBranchLeafNode.findMany({
      where: {
        type: 'leaf_field',
        tbl_type: 3, // Actuellement cod√©s comme "Champ simple"
        TreeBranchLeafNode: {
          type: 'section' // Mais parent est une section
        }
      },
      include: {
        TreeBranchLeafNode: true
      }
    });
    
    console.log(`   Champs mal class√©s trouv√©s: ${champsEnSection.length}`);
    champsEnSection.forEach((c, i) => {
      console.log(`   ${i+1}. "${c.label}" ‚Üí ${c.tbl_code} (dans section "${c.TreeBranchLeafNode?.label}")`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

analyserElement();