const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function compareTooltipIds() {
  try {
    console.log('üîç [COMPARAISON] Recherche des n≈ìuds avec tooltips...\n');
    
    // Rechercher les n≈ìuds sp√©cifiques trouv√©s dans les logs
    const specificNodes = await prisma.treeBranchLeafNode.findMany({
      where: {
        id: {
          in: ['node_1757366229534_x6jxzmvmu', 'node_1757366229590_6xhv22a3a']
        }
      },
      select: {
        id: true,
        label: true,
        text_helpTooltipType: true,
        text_helpTooltipText: true,
        text_helpTooltipImage: true
      }
    });

    console.log('üéØ [N≈íUDS SP√âCIFIQUES] D√©tails des n≈ìuds avec tooltips trouv√©s dans les logs serveur:');
    specificNodes.forEach(node => {
      console.log(`‚îå‚îÄ‚îÄ ID: ${node.id}`);
      console.log(`‚îú‚îÄ‚îÄ Label: ${node.label || 'Sans label'}`);
      console.log(`‚îú‚îÄ‚îÄ Type tooltip: ${node.text_helpTooltipType || 'Aucun'}`);
      console.log(`‚îú‚îÄ‚îÄ Texte tooltip: ${node.text_helpTooltipText ? `${node.text_helpTooltipText.length} caract√®res` : 'Aucun'}`);
      console.log(`‚îî‚îÄ‚îÄ Image tooltip: ${node.text_helpTooltipImage ? `${node.text_helpTooltipImage.length} caract√®res` : 'Aucune'}`);
      console.log('');
    });

    if (specificNodes.length === 0) {
      console.log('‚ùå [ERREUR] Aucun des n≈ìuds sp√©cifiques trouv√© dans la base !');
      
      // Recherche alternative avec un filtre moins strict
      console.log('üîç [RECHERCHE ALTERNATIVE] Cherchons tous les n≈ìuds avec tooltip...');
      const allTooltipNodes = await prisma.treeBranchLeafNode.findMany({
        where: {
          OR: [
            { text_helpTooltipType: { not: null } },
            { text_helpTooltipText: { not: null } },
            { text_helpTooltipImage: { not: null } }
          ]
        },
        select: {
          id: true,
          label: true,
          text_helpTooltipType: true,
          text_helpTooltipText: true,
          text_helpTooltipImage: true
        },
        take: 10
      });

      console.log(`üìä [R√âSULTAT ALTERNATIF] ${allTooltipNodes.length} n≈ìuds trouv√©s (max 10 affich√©s):`);
      allTooltipNodes.forEach((node, index) => {
        console.log(`${index + 1}. ID: ${node.id}`);
        console.log(`   Label: ${node.label || 'Sans label'}`);
        console.log(`   Type: ${node.text_helpTooltipType || 'Aucun'}`);
        console.log(`   Texte: ${node.text_helpTooltipText ? `${node.text_helpTooltipText.length} car.` : 'Aucun'}`);
        console.log(`   Image: ${node.text_helpTooltipImage ? `${node.text_helpTooltipImage.length} car.` : 'Aucune'}`);
        console.log('---');
      });
    }

  } catch (error) {
    console.error('‚ùå [ERREUR]', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

compareTooltipIds();