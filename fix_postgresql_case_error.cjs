const { PrismaClient } = require('@prisma/client');

async function fixPostgreSQLCaseError() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîß CORRECTION DE L\'ERREUR CASE POSTGRESQL QUI EMP√äCHE LA CR√âATION DE DEVIS\n');

    // Supprimer temporairement TOUS les triggers probl√©matiques
    console.log('1Ô∏è‚É£ Suppression des triggers probl√©matiques...');
    
    const triggersToRemove = [
      'auto_operation_data_trigger',
      'auto_create_variables_trigger',
      'trigger_auto_resolve_operations',
      'auto_update_on_data_change'
    ];

    for (const triggerName of triggersToRemove) {
      try {
        await prisma.$executeRaw`DROP TRIGGER IF EXISTS ${triggerName} ON "TreeBranchLeafSubmission";`;
        await prisma.$executeRaw`DROP TRIGGER IF EXISTS ${triggerName} ON "TreeBranchLeafSubmissionData";`;
        console.log(`   ‚úÖ Trigger ${triggerName} supprim√©`);
      } catch (e) {
        console.log(`   ‚ö†Ô∏è Trigger ${triggerName} non trouv√©`);
      }
    }

    // Supprimer les fonctions probl√©matiques
    console.log('2Ô∏è‚É£ Suppression des fonctions probl√©matiques...');
    
    const functionsToRemove = [
      'auto_create_operation_data',
      'auto_create_variables_then_translate',
      'auto_resolve_tree_branch_leaf_operations',
      'auto_update_on_data_change'
    ];

    for (const functionName of functionsToRemove) {
      try {
        await prisma.$executeRaw`DROP FUNCTION IF EXISTS ${functionName}();`;
        console.log(`   ‚úÖ Fonction ${functionName} supprim√©e`);
      } catch (e) {
        console.log(`   ‚ö†Ô∏è Fonction ${functionName} non trouv√©e`);
      }
    }

    console.log('3Ô∏è‚É£ Test de cr√©ation de soumission...');
    
    // Tester la cr√©ation d'une soumission maintenant que les triggers sont supprim√©s
    const testTree = await prisma.treeBranchLeafTree.findFirst();
    
    if (testTree) {
      console.log(`üìã Test avec tree: ${testTree.name || testTree.id}`);
      
      const testSubmission = await prisma.treeBranchLeafSubmission.create({
        data: {
          id: 'test-' + Date.now(),
          treeId: testTree.id,
          userId: 'test-user',
          status: 'draft',
          summary: { name: 'Test sans trigger', createdBy: 'test-user' },
          updatedAt: new Date(),
          TreeBranchLeafSubmissionData: {
            create: [
              {
                id: 'test-data-' + Date.now(),
                nodeId: 'test-node',
                value: 'Test value'
              }
            ]
          }
        }
      });

      console.log(`‚úÖ Test r√©ussi! Soumission cr√©√©e: ${testSubmission.id}`);
      
      // Nettoyer le test
      await prisma.treeBranchLeafSubmissionData.deleteMany({
        where: { submissionId: testSubmission.id }
      });
      await prisma.treeBranchLeafSubmission.delete({
        where: { id: testSubmission.id }
      });
      
      console.log(`üßπ Test nettoy√©`);
    }

    console.log('\nüéØ R√âSOLUTION TEMPORAIRE:');
    console.log('‚úÖ Triggers probl√©matiques supprim√©s');
    console.log('‚úÖ Fonctions probl√©matiques supprim√©es');
    console.log('‚úÖ Cr√©ation de soumission maintenant possible');
    console.log('‚ö†Ô∏è Fonctionnalit√© automatique temporairement d√©sactiv√©e');
    
    console.log('\nüöÄ VOUS POUVEZ MAINTENANT CR√âER DES DEVIS!');
    console.log('   Les triggers automatiques sont d√©sactiv√©s temporairement');
    console.log('   pour permettre la cr√©ation de devis sans erreur.');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

fixPostgreSQLCaseError();