import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function populateDatabase() {
  try {
    console.log('üöÄ Remplissage de la base de donn√©es...\n');

    // Obtenir toutes les organisations
    const organizations = await prisma.organization.findMany();
    console.log(`üìä ${organizations.length} organisation(s) trouv√©e(s)\n`);

    if (organizations.length === 0) {
      console.log('‚ùå Aucune organisation trouv√©e !');
      return;
    }

    for (const org of organizations) {
      console.log(`üè¢ Traitement organisation: ${org.name} (${org.id})`);

      // 1) Statuts d'appel (commercial)
      const callStatuses = [
        { name: "üìû Pas de r√©ponse", description: "Le client n'a pas d√©croch√©", color: "#f39c12", order: 1 },
        { name: "üìû Num√©ro incorrect / injoignable", description: "Num√©ro invalide ou injoignable", color: "#e74c3c", order: 2 },
        { name: "üìû Rappel programm√©", description: "Rappel planifi√© avec le client", color: "#3498db", order: 3 },
        { name: "üìû Contact√© ‚Äì Pas int√©ress√©", description: "Client contact√© mais pas int√©ress√©", color: "#e67e22", order: 4 },
        { name: "üìû Contact√© ‚Äì √Ä rappeler plus tard", description: "Client demande √† √™tre rappel√© plus tard", color: "#f1c40f", order: 5 },
        { name: "üìû Contact√© ‚Äì Information envoy√©e (mail/sms)", description: "Informations envoy√©es au client", color: "#9b59b6", order: 6 },
        { name: "üìû Contact√© ‚Äì Rendez-vous fix√©", description: "RDV fix√© avec le client", color: "#2ecc71", order: 7 },
        { name: "üìû Contact√© ‚Äì Refus (non direct √† l'appel)", description: "Refus lors de l'appel", color: "#c0392b", order: 8 },
        { name: "üìû Contact√© ‚Äì Refus ferme (apr√®s devis/visite)", description: "Refus d√©finitif apr√®s devis/visite", color: "#8e44ad", order: 9 },
        { name: "üìû Contact√© ‚Äì Devis demand√©", description: "Client demande un devis", color: "#16a085", order: 10 },
        { name: "üìû Contact√© ‚Äì Devis envoy√©", description: "Devis envoy√© au client", color: "#27ae60", order: 11 },
        { name: "üìû Contact√© ‚Äì En n√©gociation", description: "N√©gociation en cours", color: "#f39c12", order: 12 },
        { name: "üìû Contact√© ‚Äì Gagn√© (vente conclue)", description: "Vente finalis√©e", color: "#2ecc71", order: 13 }
      ];

      // 2) Statuts du lead / pipeline
      const leadStatuses = [
        { name: "üü¢ Nouveau lead", color: "#2ecc71", order: 1 },
        { name: "üü° Contacter (d√®s le 1er appel tent√©)", color: "#f1c40f", order: 2 },
        { name: "üü° En attente de rappel (si convenu avec le client)", color: "#f39c12", order: 3 },
        { name: "üü° Information envoy√©e", color: "#f1c40f", order: 4 },
        { name: "üü† Devis en pr√©paration", color: "#e67e22", order: 5 },
        { name: "üü† Devis envoy√©", color: "#d35400", order: 6 },
        { name: "üü† En n√©gociation", color: "#e74c3c", order: 7 },
        { name: "üéØ Cibl√© (objectif client)", color: "#9b59b6", order: 8 },
        { name: "üü£ Non trait√© dans le d√©lai (auto)", color: "#8e44ad", order: 9 },
        { name: "üî¥ Perdu (apr√®s visite/devis non sign√©, ou auto via SLA)", color: "#c0392b", order: 10 },
        { name: "‚ùå Refus√© (non direct / pas int√©ress√©)", color: "#e74c3c", order: 11 },
        { name: "üü¢ Gagn√©", color: "#27ae60", order: 12 },
        { name: "‚ö´ Injoignable / Archiv√©", color: "#34495e", order: 13 }
      ];

      // Cr√©er les statuts d'appel avec createMany pour plus de simplicit√©
      console.log('üìû Cr√©ation des statuts d\'appel...');
      const callStatusesToCreate = callStatuses.map(status => ({
        ...status,
        organizationId: org.id,
        isActive: true,
        isDefault: false,
        id: `call-${org.id}-${status.order}`, // ID unique
        createdAt: new Date(),
        updatedAt: new Date()
      }));

      await prisma.callStatus.createMany({
        data: callStatusesToCreate,
        skipDuplicates: true
      });
      console.log(`‚úÖ ${callStatusesToCreate.length} statuts d'appel cr√©√©s`);

      // Cr√©er les statuts de leads
      console.log('üìä Cr√©ation des statuts de leads...');
      const leadStatusesToCreate = leadStatuses.map(status => ({
        ...status,
        organizationId: org.id,
        isDefault: false,
        id: `lead-${org.id}-${status.order}`, // ID unique
        createdAt: new Date(),
        updatedAt: new Date()
      }));

      await prisma.leadStatus.createMany({
        data: leadStatusesToCreate,
        skipDuplicates: true
      });
      console.log(`‚úÖ ${leadStatusesToCreate.length} statuts de leads cr√©√©s`);

      // R√©cup√©rer les statuts cr√©√©s pour les mappings
      const createdCallStatuses = await prisma.callStatus.findMany({
        where: { organizationId: org.id }
      });
      const createdLeadStatuses = await prisma.leadStatus.findMany({
        where: { organizationId: org.id }
      });

      // 3) Cr√©er les mappings
      console.log('üîó Cr√©ation des mappings...');
      const mappingsData = [
        { callStatusName: "üìû Pas de r√©ponse", leadStatusName: "üü° Contacter (d√®s le 1er appel tent√©)" },
        { callStatusName: "üìû Num√©ro incorrect / injoignable", leadStatusName: "‚ö´ Injoignable / Archiv√©" },
        { callStatusName: "üìû Rappel programm√©", leadStatusName: "üü° En attente de rappel (si convenu avec le client)" },
        { callStatusName: "üìû Contact√© ‚Äì Pas int√©ress√©", leadStatusName: "‚ùå Refus√© (non direct / pas int√©ress√©)" },
        { callStatusName: "üìû Contact√© ‚Äì √Ä rappeler plus tard", leadStatusName: "üü° En attente de rappel (si convenu avec le client)" },
        { callStatusName: "üìû Contact√© ‚Äì Information envoy√©e (mail/sms)", leadStatusName: "üü° Information envoy√©e" },
        { callStatusName: "üìû Contact√© ‚Äì Rendez-vous fix√©", leadStatusName: "üéØ Cibl√© (objectif client)" },
        { callStatusName: "üìû Contact√© ‚Äì Refus (non direct √† l'appel)", leadStatusName: "‚ùå Refus√© (non direct / pas int√©ress√©)" },
        { callStatusName: "üìû Contact√© ‚Äì Refus ferme (apr√®s devis/visite)", leadStatusName: "üî¥ Perdu (apr√®s visite/devis non sign√©, ou auto via SLA)" },
        { callStatusName: "üìû Contact√© ‚Äì Devis demand√©", leadStatusName: "üü† Devis en pr√©paration" },
        { callStatusName: "üìû Contact√© ‚Äì Devis envoy√©", leadStatusName: "üü† Devis envoy√©" },
        { callStatusName: "üìû Contact√© ‚Äì En n√©gociation", leadStatusName: "üü† En n√©gociation" },
        { callStatusName: "üìû Contact√© ‚Äì Gagn√© (vente conclue)", leadStatusName: "üü¢ Gagn√©" }
      ];

      const mappingsToCreate = [];
      for (const mapping of mappingsData) {
        const callStatus = createdCallStatuses.find(cs => cs.name === mapping.callStatusName);
        const leadStatus = createdLeadStatuses.find(ls => ls.name === mapping.leadStatusName);
        
        if (callStatus && leadStatus) {
          mappingsToCreate.push({
            id: `mapping-${org.id}-${callStatus.order}-${leadStatus.order}`,
            organizationId: org.id,
            callStatusId: callStatus.id,
            leadStatusId: leadStatus.id,
            condition: "automatic",
            priority: 1,
            description: `${mapping.callStatusName} ‚Üí ${mapping.leadStatusName}`,
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date()
          });
        }
      }

      await prisma.callToLeadMapping.createMany({
        data: mappingsToCreate,
        skipDuplicates: true
      });
      console.log(`‚úÖ ${mappingsToCreate.length} mappings cr√©√©s`);

      console.log(`‚úÖ Organisation ${org.name} termin√©e !\n`);
    }

    console.log('üéâ Remplissage termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå ERREUR:', error);
  } finally {
    await prisma.$disconnect();
  }
}

populateDatabase();