import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

(async () => {
    console.log('üîç EXAMEN D√âTAILL√â DES FORMULES EXISTANTES\n');
    
    const formulas = await prisma.fieldFormula.findMany({
        include: { Field: true }
    });
    
    console.log(`üìã Nombre de formules trouv√©es: ${formulas.length}\n`);
    
    formulas.forEach((f, index) => {
        console.log(`üìÑ FORMULE ${index + 1}:`);
        console.log(`   üè∑Ô∏è  Champ: ${f.Field.label}`);
        console.log(`   üéØ Field ID: ${f.fieldId}`);
        console.log(`   üìÑ Type de champ: ${f.Field.type}`);
        console.log(`   üßÆ Formule: ${f.formula}`);
        console.log(`   üìù Titre: ${f.title || 'N/A'}`);
        console.log(`   üìñ Description: ${f.description || 'N/A'}`);
        console.log('');
    });
    
    // Test direct de la formule existante
    if (formulas.length > 0) {
        const f = formulas[0];
        console.log('üß™ TEST DE LA FORMULE EXISTANTE...');
        
        try {
            const response = await fetch('http://localhost:4000/api/dynamic-formulas/calculate', {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'x-organization-id': '1' // ID d'organisation par d√©faut
                },
                body: JSON.stringify({
                    fieldId: f.fieldId,
                    fieldValues: {
                        [f.fieldId]: 'calcul-prix-kwh',
                        'montant': 1200,
                        'consommation': 4000
                    }
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log(`‚úÖ R√©sultat: ${result.result || result.value || JSON.stringify(result)}`);
                console.log(`üìù Trace: ${result.executionTrace || result.trace || 'N/A'}`);
            } else {
                const error = await response.text();
                console.log(`‚ùå Erreur: ${error.substring(0, 200)}...`);
            }
        } catch (error) {
            console.log(`‚ùå Erreur r√©seau: ${error.message}`);
        }
    }
    
    await prisma.$disconnect();
})();
