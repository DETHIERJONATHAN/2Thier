const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function addTreeBranchLeafModule() {
  try {
    console.log('üå≥ Ajout du module TreeBranchLeaf √† la cat√©gorie Formulaires...');
    
    // Trouver la cat√©gorie Formulaires
    const formulaireCategory = await prisma.category.findFirst({
      where: { name: { contains: 'Formulaire' } }
    });
    
    if (!formulaireCategory) {
      console.error('‚ùå Cat√©gorie Formulaires non trouv√©e');
      return;
    }
    
    console.log('‚úÖ Cat√©gorie trouv√©e:', formulaireCategory.name, 'ID:', formulaireCategory.id);
    
    // V√©rifier si le module TreeBranchLeaf existe d√©j√†
    const existingModule = await prisma.module.findFirst({
      where: { key: 'treebranchleaf' }
    });
    
    if (existingModule) {
      console.log('üîÑ Module TreeBranchLeaf existe d√©j√†, mise √† jour...');
      await prisma.module.update({
        where: { id: existingModule.id },
        data: {
          categoryId: formulaireCategory.id,
          label: 'TreeBranchLeaf',
          route: '/formulaire/treebranchleaf',
          description: 'Syst√®me de formulaires arborescents drag & drop avec logique m√©tier avanc√©e',
          icon: 'BranchesOutlined',
          active: true,
          order: 2
        }
      });
      console.log('‚úÖ Module TreeBranchLeaf mis √† jour');
    } else {
      console.log('‚ûï Cr√©ation du nouveau module TreeBranchLeaf...');
      await prisma.module.create({
        data: {
          id: `treebranchleaf-${Date.now()}`,
          key: 'treebranchleaf',
          label: 'TreeBranchLeaf',
          feature: 'treebranchleaf',
          route: '/formulaire/treebranchleaf', 
          description: 'Syst√®me de formulaires arborescents drag & drop avec logique m√©tier avanc√©e',
          icon: 'BranchesOutlined',
          active: true,
          order: 2,
          superAdminOnly: false,
          categoryId: formulaireCategory.id
        }
      });
      console.log('‚úÖ Module TreeBranchLeaf cr√©√© avec succ√®s');
    }
    
    // V√©rifier le r√©sultat
    const updatedCategory = await prisma.category.findUnique({
      where: { id: formulaireCategory.id },
      include: { Module: true }
    });
    
    console.log('\nüìã Modules dans la cat√©gorie Formulaires:');
    updatedCategory.Module.forEach((mod, index) => {
      console.log(`${index + 1}. ${mod.key} | ${mod.label} | ${mod.route}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTreeBranchLeafModule();
