// üîç ANALYSE DU SYST√àME DE FORMULES TREEBRANCHLEAF
// =====================================================

/**
 * COMMENT R√âCUP√âRER LES FORMULES D'UN N≈íUD DEPUIS LE MODULE FORMULE
 * 
 * Il y a 2 endroits o√π les formules sont stock√©es :
 * 
 * 1Ô∏è‚É£ TABLE D√âDI√âE: TreeBranchLeafNodeFormula (recommand√©)
 * 2Ô∏è‚É£ METADATA: node.metadata.capabilities.formulas (legacy/cache)
 * 
 * Le syst√®me pr√©f√®re la table d√©di√©e car c'est plus structur√©.
 */

// =====================================================
// üìã STRUCTURE DE LA TABLE TreeBranchLeafNodeFormula
// =====================================================

interface TreeBranchLeafNodeFormula {
  id: string;                    // ID unique de la formule
  nodeId: string;               // ID du n≈ìud TreeBranchLeaf
  organizationId?: string;      // Organisation (pour filtrage)
  name: string;                 // Nom de la formule ("Formule 1", "Calcul TVA", etc.)
  tokens: string[];             // Tokens de la formule en JSON (les √©l√©ments de la formule)
  description?: string;         // Description optionnelle
  isDefault: boolean;          // Si c'est la formule par d√©faut
  order: number;               // Ordre d'affichage
  createdAt: Date;
  updatedAt: Date;
}

// =====================================================
// üîß COMMENT R√âCUP√âRER LES FORMULES DEPUIS LE MODULE
// =====================================================

// ‚úÖ M√âTHODE 1: Via l'API REST (recommand√©)
const formulas = await api.get(`/api/treebranchleaf/nodes/${nodeId}/formulas`);

// ‚úÖ M√âTHODE 2: Via l'endpoint d√©di√© aux formules
const allFormulas = await api.get('/api/treebranchleaf/formulas/all');

// ‚úÖ M√âTHODE 3: Via Prisma directement (c√¥t√© serveur)
const formulas = await prisma.treeBranchLeafNodeFormula.findMany({
  where: { nodeId: nodeId },
  orderBy: { order: 'asc' }
});

// ‚úÖ M√âTHODE 4: Via la fonction utilitaire
import { getNodeFormulas } from '../lib/api/node-formulas';
const formulas = await getNodeFormulas(nodeId);

// =====================================================
// üéØ EXEMPLE PRATIQUE: R√âCUP√âRER TOUTES LES FORMULES
// =====================================================

const exempleRecuperationFormules = async (nodeId: string) => {
  try {
    // 1. R√©cup√©rer les formules de la table d√©di√©e
    const formulesTable = await api.get(`/api/treebranchleaf/nodes/${nodeId}/formulas`);
    console.log('üìä Formules depuis table:', formulesTable);
    
    // 2. R√©cup√©rer depuis metadata (fallback/cache)
    const node = await api.get(`/api/treebranchleaf/nodes/${nodeId}`);
    const formulesMetadata = node?.metadata?.capabilities?.formulas || [];
    console.log('üìä Formules depuis metadata:', formulesMetadata);
    
    // 3. Le syst√®me pr√©f√®re la table, sinon fallback sur metadata
    const formules = formulesTable.length > 0 ? formulesTable : formulesMetadata;
    
    return formules;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration formules:', error);
    return [];
  }
};

// =====================================================
// üîÑ FLUX NORMAL D'UTILISATION
// =====================================================

/**
 * 1. L'utilisateur ouvre le FormulaPanel dans TreeBranchLeaf
 * 2. Le FormulaPanel charge d'abord depuis la table TreeBranchLeafNodeFormula
 * 3. Si aucune formule en table, il regarde dans node.metadata.capabilities.formulas
 * 4. L'utilisateur peut ajouter/modifier/supprimer des formules
 * 5. Les changements sont sauv√©s en priorit√© dans la table d√©di√©e
 * 6. La metadata est mise √† jour comme cache/synchronisation
 */

// =====================================================
// üí° POINTS CL√âS POUR LE MODULE FORMULE
// =====================================================

/**
 * ‚úÖ Pour acc√©der aux formules d'un n≈ìud depuis ton module:
 * 
 * 1. Utilise l'API: GET /api/treebranchleaf/nodes/{nodeId}/formulas
 * 2. Ou utilise la fonction: getNodeFormulas(nodeId) 
 * 3. Chaque formule a un nom, des tokens, et peut √™tre √©valu√©e
 * 4. Les tokens sont les √©l√©ments de la formule (variables, op√©rateurs, nombres)
 * 
 * ‚úÖ Structure d'une formule typique:
 * {
 *   id: "formula-1234",
 *   name: "Calcul TVA", 
 *   tokens: ["@value.prix", "*", "1.21"],
 *   description: "Prix avec TVA 21%"
 * }
 * 
 * ‚úÖ Pour √©valuer une formule:
 * - Les tokens contiennent la logique
 * - @value.field fait r√©f√©rence √† un champ du formulaire
 * - Les op√©rateurs sont: +, -, *, /, etc.
 */

export { exempleRecuperationFormules };
