// Script 4: For√ßage d'affichage des valeurs mirror
console.log('üõ†Ô∏è SCRIPT 4: FOR√áAGE D\'AFFICHAGE DES VALEURS MIRROR');
console.log('='.repeat(50));

// 1. Analyser les cartes bloqu√©es
const smartFields = document.querySelectorAll('[data-testid*="smart-calculated-field"]');
const blockedCards = Array.from(smartFields).filter(field => 
  field.textContent && field.textContent.includes('Calcul...')
);

console.log(`üîç ${blockedCards.length} cartes bloqu√©es sur "Calcul..." trouv√©es`);

if (blockedCards.length === 0) {
  console.log('‚úÖ Aucune carte bloqu√©e! Le syst√®me fonctionne correctement.');
} else {

// 2. Fonction de for√ßage d'affichage
function forcerAffichageMirror(field, index) {
  const testId = field.getAttribute('data-testid');
  const fieldId = testId ? testId.replace('smart-calculated-field-', '') : null;
  
  if (!fieldId) {
    console.log(`‚ö†Ô∏è Carte ${index + 1}: Impossible d'extraire l'ID`);
    return false;
  }
  
  // Chercher une valeur mirror correspondante
  const formData = window.TBL_FORM_DATA || {};
  const mirrorKeys = Object.keys(formData).filter(key => {
    if (!key.startsWith('__mirror_data_')) return false;
    const mirrorId = key.replace('__mirror_data_', '').split('_')[0];
    return mirrorId === fieldId || fieldId.includes(mirrorId) || mirrorId.includes(fieldId);
  });
  
  if (mirrorKeys.length === 0) {
    console.log(`‚ö†Ô∏è Carte ${index + 1} (${fieldId}): Aucun mirror trouv√©`);
    return false;
  }
  
  // Utiliser la premi√®re valeur mirror disponible
  const mirrorKey = mirrorKeys[0];
  const mirrorValue = formData[mirrorKey];
  
  if (mirrorValue === null || mirrorValue === undefined || mirrorValue === '') {
    console.log(`‚ö†Ô∏è Carte ${index + 1} (${fieldId}): Mirror vide`);
    return false;
  }
  
  // Forcer l'affichage
  const newContent = `${mirrorValue} (mirror)`;
  field.textContent = newContent;
  field.style.color = '#059669';
  field.style.fontWeight = 'bold';
  
  console.log(`‚úÖ Carte ${index + 1} (${fieldId}): "${mirrorValue}" affich√© depuis ${mirrorKey}`);
  return true;
}

// 3. Appliquer le for√ßage √† toutes les cartes bloqu√©es
console.log('\nüõ†Ô∏è FOR√áAGE EN COURS...');
let forcedCount = 0;

blockedCards.forEach((field, index) => {
  if (forcerAffichageMirror(field, index)) {
    forcedCount++;
  }
});

console.log(`\nüìä R√âSULTAT DU FOR√áAGE:`);
console.log(`- Cartes forc√©es: ${forcedCount}/${blockedCards.length}`);
console.log(`- Taux de succ√®s: ${Math.round((forcedCount / blockedCards.length) * 100)}%`);

if (forcedCount > 0) {
  console.log('\nüéâ SUCCESS! Des valeurs ont √©t√© forc√©es avec les donn√©es mirror!');
  console.log('   ‚Üí Cela prouve que le syst√®me mirror fonctionne');
  console.log('   ‚Üí Le probl√®me est dans la logique d\'affichage du SmartCalculatedField');
} else {
  console.log('\n‚ùå Aucune valeur n\'a pu √™tre forc√©e');
  console.log('   ‚Üí Probl√®me possible avec la g√©n√©ration des cl√©s mirror');
}

// 4. Exposer la fonction pour usage manuel
window.forcerMirror = function(cardIndex) {
  const field = smartFields[cardIndex];
  if (field && field.textContent && field.textContent.includes('Calcul...')) {
    return forcerAffichageMirror(field, cardIndex);
  }
  return false;
};

console.log('\nüîß Fonction expos√©e: forcerMirror(index) pour forcer une carte sp√©cifique');
}