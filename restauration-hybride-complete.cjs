const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function restaurationHybrideComplete() {
    console.log('üöÄ RESTAURATION HYBRIDE COMPL√àTE - FUSION DES DEUX SAUVEGARDES');
    console.log('=' .repeat(80));
    
    try {
        // Charger les deux sauvegardes
        console.log('üìÅ Chargement des sauvegardes...');
        const backupSecurite = JSON.parse(fs.readFileSync(path.join(__dirname, 'backups', 'json', 'sauvegarde_securite_1755611798954.json'), 'utf8'));
        const backup2THIER = JSON.parse(fs.readFileSync(path.join(__dirname, 'backups', 'json', 'sauvegarde 2THIER_2025-08-14_14-17-20.json'), 'utf8'));
        console.log('‚úÖ Sauvegardes charg√©es');
        
        // VIDER COMPL√àTEMENT avec approche TRUNCATE CASCADE
        console.log('\\nüóëÔ∏è VIDAGE TOTAL DE LA BASE...');
        
        // Utiliser TRUNCATE CASCADE pour vider toutes les tables avec d√©pendances
        try {
            await prisma.$executeRaw`
                TRUNCATE TABLE "FieldOptionNode", "FieldOption", "FieldSubField", "FieldSubFieldOption", "FieldValidation", "FieldDependency", "FieldFormula", "FieldCondition", "FieldModule", "Field",
                "Section", "Block",
                "Permission", "UserOrganization", "Role",  
                "OrganizationModuleStatus", "Module",
                "CalendarParticipant", "CalendarEvent", "GoogleToken", "GoogleWorkspaceConfig", "GoogleVoiceCall", "GoogleVoiceConfig", "GoogleVoiceSMS", "GoogleWorkspaceUser",
                "TelnyxCall", "TelnyxConnection", "TelnyxMessage", "TelnyxPhoneNumber", "TelnyxSettings", "TelnyxUserConfig",
                "Email", "EmailAccount", "EmailDomain", "EmailTemplate", "DeletedEmail", "GoogleMailWatch",
                "Quote", "QuoteDocument", "QuoteItem",
                "FormSubmission", "TimelineEvent", "Notification",
                "CallToLeadMapping", "CallStatus", "LeadStatus", "LeadSource", "Lead",
                "Invitation", "AiUsageLog", "AutomationRule", "IntegrationsSettings", "SystemConfig", "TechnicalData", "UserService",
                "FieldType",
                "User", "Organization"
                CASCADE;
            `;
            console.log('‚úÖ Toutes les tables vid√©es avec CASCADE');
        } catch (err) {
            console.log('‚ö†Ô∏è TRUNCATE CASCADE √©chou√©, nettoyage manuel...');
            // Nettoyage manuel en ordre de d√©pendances
            const tablesToClean = [
                'fieldOptionNode', 'fieldOption', 'fieldSubField', 'fieldSubFieldOption', 'fieldValidation', 'fieldDependency', 'fieldFormula', 'fieldCondition', 'fieldModule', 'field',
                'section', 'block',
                'permission', 'userOrganization', 'role',
                'organizationModuleStatus', 'module',
                'calendarParticipant', 'calendarEvent', 'googleToken', 'googleWorkspaceConfig', 'googleVoiceCall', 'googleVoiceConfig', 'googleVoiceSMS', 'googleWorkspaceUser',
                'telnyxCall', 'telnyxConnection', 'telnyxMessage', 'telnyxPhoneNumber', 'telnyxSettings', 'telnyxUserConfig',
                'email', 'emailAccount', 'emailDomain', 'emailTemplate', 'deletedEmail', 'googleMailWatch',
                'quote', 'quoteDocument', 'quoteItem',
                'formSubmission', 'timelineEvent', 'notification',
                'callToLeadMapping', 'callStatus', 'leadStatus', 'leadSource', 'lead',
                'invitation', 'aiUsageLog', 'automationRule', 'integrationsSettings', 'systemConfig', 'technicalData', 'userService',
                'fieldType',
                'user', 'organization'
            ];
            
            for (const table of tablesToClean) {
                try {
                    await prisma[table].deleteMany({});
                    console.log(`   ‚úÖ ${table} vid√©`);
                } catch (deleteErr) {
                    console.log(`   ‚ö†Ô∏è ${table} : ${deleteErr.message}`);
                }
            }
        }
        
        console.log('‚úÖ Base compl√®tement vid√©e');
        
        // √âTAPE 1: RESTAURER LA BASE 2THIER (plus compl√®te)
        console.log('\\nüìä √âTAPE 1: RESTAURATION BASE 2THIER...');
        
        // Organizations d'abord
        console.log('üè¢ Organizations...');
        for (const org of backup2THIER.Organization) {
            await prisma.organization.create({ data: org });
            console.log(`   ‚úÖ ${org.name}`);
        }
        
        // Users  
        console.log('üë§ Users...');
        for (const user of backup2THIER.User) {
            await prisma.user.create({ data: user });
            console.log(`   ‚úÖ ${user.firstName} ${user.lastName}`);
        }
        
        // Modules
        console.log('üîß Modules...');
        for (const module of backup2THIER.Module) {
            await prisma.module.create({ data: module });
            console.log(`   ‚úÖ ${module.name || module.id}`);
        }
        
        // Roles (avec v√©rification d'unicit√©)
        console.log('üë• Roles...');
        for (const role of backup2THIER.Role) {
            try {
                await prisma.role.create({ data: role });
                console.log(`   ‚úÖ ${role.name || role.id}`);
            } catch (err) {
                if (err.code === 'P2002') {
                    console.log(`   ‚ö†Ô∏è Role ${role.name || role.id} existe d√©j√†`);
                    // Tenter une mise √† jour √† la place
                    try {
                        await prisma.role.upsert({
                            where: { id: role.id },
                            create: role,
                            update: role
                        });
                        console.log(`   ‚úÖ ${role.name || role.id} mis √† jour`);
                    } catch (updateErr) {
                        console.log(`   ‚ùå Impossible de cr√©er/mettre √† jour le role: ${updateErr.message}`);
                    }
                } else {
                    throw err;
                }
            }
        }
        
        // UserOrganization
        console.log('üîó UserOrganization...');
        for (const userOrg of backup2THIER.UserOrganization) {
            await prisma.userOrganization.create({ data: userOrg });
            console.log(`   ‚úÖ User-Org link`);
        }
        
        // Permissions
        console.log('üîê Permissions...');
        for (const permission of backup2THIER.Permission) {
            await prisma.permission.create({ data: permission });
        }
        console.log(`   ‚úÖ ${backup2THIER.Permission.length} permissions`);
        
        // OrganizationModuleStatus
        console.log('üìã OrganizationModuleStatus...');
        for (const status of backup2THIER.OrganizationModuleStatus) {
            await prisma.organizationModuleStatus.create({ data: status });
        }
        console.log(`   ‚úÖ ${backup2THIER.OrganizationModuleStatus.length} statuts`);
        
        // LeadStatus (AVANT les Leads !)
        console.log('üìä LeadStatus...');
        for (const status of backup2THIER.LeadStatus) {
            await prisma.leadStatus.create({ data: status });
            console.log(`   ‚úÖ ${status.name}`);
        }
        
        // Leads (APR√àS les LeadStatus)
        console.log('üéØ Leads...');
        for (const lead of backup2THIER.Lead) {
            await prisma.lead.create({ data: lead });
            console.log(`   ‚úÖ ${lead.email || 'Lead sans email'}`);
        }
        
        // CalendarEvent
        console.log('üìÖ CalendarEvent...');
        for (const event of backup2THIER.CalendarEvent) {
            await prisma.calendarEvent.create({ data: event });
            console.log(`   ‚úÖ ${event.title}`);
        }
        
        // CallStatus
        console.log('üìû CallStatus...');
        for (const callStatus of backup2THIER.CallStatus) {
            await prisma.callStatus.create({ data: callStatus });
            console.log(`   ‚úÖ ${callStatus.name}`);
        }
        
        // CallToLeadMapping
        console.log('üîó CallToLeadMapping...');
        for (const mapping of backup2THIER.CallToLeadMapping) {
            await prisma.callToLeadMapping.create({ data: mapping });
        }
        console.log(`   ‚úÖ ${backup2THIER.CallToLeadMapping.length} mappings`);
        
        // GoogleToken
        console.log('üîë GoogleToken...');
        for (const token of backup2THIER.GoogleToken) {
            await prisma.googleToken.create({ data: token });
        }
        console.log(`   ‚úÖ ${backup2THIER.GoogleToken.length} tokens`);
        
        // GoogleWorkspaceConfig
        console.log('‚öôÔ∏è GoogleWorkspaceConfig...');
        for (const config of backup2THIER.GoogleWorkspaceConfig) {
            await prisma.googleWorkspaceConfig.create({ data: config });
        }
        console.log(`   ‚úÖ ${backup2THIER.GoogleWorkspaceConfig.length} configs`);
        
        // TelnyxSettings
        console.log('üì± TelnyxSettings...');
        for (const setting of backup2THIER.TelnyxSettings) {
            await prisma.telnyxSettings.create({ data: setting });
        }
        console.log(`   ‚úÖ ${backup2THIER.TelnyxSettings.length} settings`);
        
        // Invitation
        console.log('üìß Invitation...');
        for (const invitation of backup2THIER.Invitation) {
            await prisma.invitation.create({ data: invitation });
        }
        console.log(`   ‚úÖ ${backup2THIER.Invitation.length} invitations`);
        
        // FieldType
        console.log('üìù FieldType...');
        for (const fieldType of backup2THIER.FieldType) {
            await prisma.fieldType.create({ data: fieldType });
            console.log(`   ‚úÖ ${fieldType.name}`);
        }
        
        // √âTAPE 2: AJOUTER LES DONN√âES MANQUANTES DE LA SAUVEGARDE S√âCURIT√â
        console.log('\\nüîß √âTAPE 2: COMPL√âTION AVEC SAUVEGARDE S√âCURIT√â...');
        
        // Blocks (fusionner les deux)
        console.log('üß± Blocks (fusion)...');
        // D'abord les blocks de 2THIER
        for (const block of backup2THIER.Block) {
            await prisma.block.create({ data: block });
            console.log(`   ‚úÖ ${block.name} (2THIER)`);
        }
        // Puis les blocks manquants de S√©curit√©
        for (const block of backupSecurite.Block) {
            const existsIn2THIER = backup2THIER.Block.find(b => b.id === block.id);
            if (!existsIn2THIER) {
                await prisma.block.create({ data: block });
                console.log(`   ‚úÖ ${block.name} (S√©curit√©)`);
            }
        }
        
        // Sections (CRITIQUES - manquantes dans 2THIER !)
        console.log('üìÑ Sections (AJOUT depuis S√©curit√©)...');
        const sectionsSecurite = [
            { id: "458a79e0-f453-481e-90af-7c239df12409", name: "Informations client", blockId: "ec64e4ae-9f89-4eee-87db-2438bb60dc81", order: 0 },
            { id: "5a4f5ff7-89c2-4e3e-8434-2beb343b3676", name: "Client", blockId: "f10b3fb1-1417-4e67-82a9-749edbbf66f6", order: 0 },
            { id: "a640b822-26e0-46d6-a0e2-2b454a29d1e8", name: "Mesures", blockId: "f10b3fb1-1417-4e67-82a9-749edbbf66f6", order: 1 },
            { id: "c3dba835-3d94-4434-b3c5-3c0daccdb52b", name: "PV", blockId: "f10b3fb1-1417-4e67-82a9-749edbbf66f6", order: 2 },
            { id: "ef23321c-26a1-413d-839d-23956a19690c", name: "Thermo", blockId: "f10b3fb1-1417-4e67-82a9-749edbbf66f6", order: 3 },
            { id: "5f439c3f-38ee-49d6-af12-84a709ddec57", name: "PAC A/A", blockId: "f10b3fb1-1417-4e67-82a9-749edbbf66f6", order: 4 },
            { id: "6544bf4b-8fe3-4515-85dd-839c3137575e", name: "PAC A/E", blockId: "f10b3fb1-1417-4e67-82a9-749edbbf66f6", order: 5 },
            { id: "721f073b-e290-45b1-b406-855c8b3fdb31", name: "Toitures", blockId: "f10b3fb1-1417-4e67-82a9-749edbbf66f6", order: 6 }
        ];
        
        // Garder les sections de 2THIER
        for (const section of backup2THIER.Section) {
            await prisma.section.create({ data: section });
            console.log(`   ‚úÖ ${section.name} (2THIER)`);
        }
        
        // Ajouter les sections de s√©curit√©
        for (const section of sectionsSecurite) {
            const existsIn2THIER = backup2THIER.Section.find(s => s.id === section.id);
            if (!existsIn2THIER) {
                await prisma.section.create({ data: section });
                console.log(`   ‚úÖ ${section.name} (S√©curit√©)`);
            }
        }
        
        // Fields (FUSION CRITIQUE)
        console.log('üìù Fields (fusion compl√®te)...');
        // D'abord les fields de 2THIER
        for (const field of backup2THIER.Field) {
            await prisma.field.create({ data: field });
            console.log(`   ‚úÖ ${field.label} (2THIER)`);
        }
        // Puis les fields manquants de S√©curit√©
        for (const field of backupSecurite.Field) {
            const existsIn2THIER = backup2THIER.Field.find(f => f.id === field.id);
            if (!existsIn2THIER) {
                await prisma.field.create({ data: field });
                console.log(`   ‚úÖ ${field.label} (S√©curit√©)`);
            }
        }
        
        // FieldOption (MAINTENANT que les Fields existent)
        console.log('üîß FieldOption (apr√®s Fields)...');
        for (const option of backup2THIER.FieldOption) {
            await prisma.fieldOption.create({ data: option });
        }
        console.log(`   ‚úÖ ${backup2THIER.FieldOption.length} options`);
        
        // FieldOptionNode (CRITIQUES - compl√®tement manquants dans 2THIER !)
        console.log('üîó FieldOptionNode (AJOUT depuis S√©curit√©)...');
        const optionNodesSecurite = [
            {
                id: "07c45baa-c3d2-4d48-8a95-7f711f5e45d3",
                fieldId: "c8a2467b-9cf1-4dba-aeaf-77240adeedd5",
                parentId: null,
                label: "Calcul du prix Kw/h",
                value: "calcul-du-prix-kwh",
                order: 0,
                data: { "nextField": { "type": "number", "placeholder": "Calcul du prix Kw/H" } },
                createdAt: new Date(),
                updatedAt: new Date()
            },
            {
                id: "56bb1a91-20ef-453f-925a-41e1c565402b",
                fieldId: "c8a2467b-9cf1-4dba-aeaf-77240adeedd5",
                parentId: null,
                label: "Prix Kw/h",
                value: "prix-kwh",
                order: 1,
                data: { "nextField": { "type": "number", "placeholder": "Prix Kh/h" } },
                createdAt: new Date(),
                updatedAt: new Date()
            }
        ];
        
        for (const option of optionNodesSecurite) {
            await prisma.fieldOptionNode.create({ data: option });
            console.log(`   ‚úÖ ${option.label} (FieldOptionNode)`);
        }
        
        console.log('\\nüéâ RESTAURATION HYBRIDE COMPL√àTE ET TOTALE TERMIN√âE !');
        
        // V√âRIFICATION FINALE EXHAUSTIVE
        console.log('\\nüìä V√âRIFICATION FINALE EXHAUSTIVE:');
        const counts = {
            organizations: await prisma.organization.count(),
            users: await prisma.user.count(),
            modules: await prisma.module.count(),
            roles: await prisma.role.count(),
            permissions: await prisma.permission.count(),
            userOrganizations: await prisma.userOrganization.count(),
            organizationModuleStatus: await prisma.organizationModuleStatus.count(),
            blocks: await prisma.block.count(),
            sections: await prisma.section.count(),
            fields: await prisma.field.count(),
            fieldOptions: await prisma.fieldOption.count(),
            fieldOptionNodes: await prisma.fieldOptionNode.count(),
            fieldTypes: await prisma.fieldType.count(),
            leads: await prisma.lead.count(),
            leadStatuses: await prisma.leadStatus.count(),
            calendarEvents: await prisma.calendarEvent.count(),
            callStatuses: await prisma.callStatus.count(),
            callToLeadMappings: await prisma.callToLeadMapping.count(),
            googleTokens: await prisma.googleToken.count(),
            googleWorkspaceConfigs: await prisma.googleWorkspaceConfig.count(),
            telnyxSettings: await prisma.telnyxSettings.count(),
            invitations: await prisma.invitation.count()
        };
        
        Object.entries(counts).forEach(([table, count]) => {
            console.log(`   ‚úÖ ${table}: ${count}`);
        });
        
        // V√©rification sp√©cifique du champ Prix Kw/h
        const prixKwhField = await prisma.field.findFirst({
            where: { id: 'c8a2467b-9cf1-4dba-aeaf-77240adeedd5' },
            include: { optionNodes: true }
        });
        
        if (prixKwhField && prixKwhField.optionNodes && prixKwhField.optionNodes.length === 2) {
            console.log('\\nüéØ CHAMP PRIX KW/H PARFAITEMENT RESTAUR√â !');
            console.log(`   - ID: ${prixKwhField.id}`);
            console.log(`   - Options: ${prixKwhField.optionNodes.length}`);
            prixKwhField.optionNodes.forEach(opt => {
                console.log(`     ‚Ä¢ ${opt.label} (${opt.value})`);
            });
        } else {
            console.log('\\n‚ùå PROBL√àME avec le champ Prix Kw/h !');
        }
        
        console.log('\\nüöÄ VOTRE CRM EST MAINTENANT COMPL√àTEMENT RESTAUR√â AVEC TOUTES LES DONN√âES !');
        console.log('üí™ BASE 2THIER + COMPL√âTION S√âCURIT√â = PERFECTION !');
        
    } catch (error) {
        console.error('‚ùå ERREUR CRITIQUE lors de la restauration hybride:', error);
        console.error('Details:', error.message);
        if (error.code) {
            console.error('Code:', error.code);
        }
    } finally {
        await prisma.$disconnect();
    }
}

restaurationHybrideComplete();
