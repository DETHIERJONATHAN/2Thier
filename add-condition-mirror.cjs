const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addConditionToMirrorSystem() {
  console.log("ü™û AJOUT: Condition au syst√®me de miroirs");
  console.log("=".repeat(50));

  try {
    const conditionId = "15314ca9-6246-4e25-b1a8-18b33c208f9a";
    const nodeId = "688046c2-c2ee-4617-b4d3-c66eca40fa9d";

    // 1. V√©rifier que la condition existe
    const condition = await prisma.treeBranchLeafNodeCondition.findUnique({
      where: { id: conditionId }
    });

    if (!condition) {
      console.log("‚ùå Condition non trouv√©e!");
      return;
    }

    console.log("‚úÖ Condition trouv√©e:", conditionId);

    // 2. V√©rifier le node
    const node = await prisma.treeBranchLeafNode.findUnique({
      where: { id: nodeId }
    });

    console.log("‚úÖ Node trouv√©:", node.label);

    // 3. Le probl√®me: Le syst√®me de mirror automatique ne reconna√Æt pas notre condition
    // car elle n'est pas li√©e correctement au node dans le syst√®me TBL
    
    console.log("\nüîç DIAGNOSTIC:");
    console.log("=".repeat(30));
    console.log("‚ùå Le syst√®me de mirror automatique cr√©e des mirrors pour:");
    console.log("   - Les donn√©es (__mirror_data_*)");
    console.log("   - Les formules (__mirror_formula_*)"); 
    console.log("   - Les conditions (__mirror_condition_*)");
    console.log("");
    console.log("‚ùå Mais il ne cr√©e PAS de mirror pour notre condition");
    console.log(`   car elle n'est pas associ√©e au node ${nodeId} dans le syst√®me`);

    // 4. Solution: Cr√©er l'entr√©e mirror manuellement
    console.log("\nüîß SOLUTION: Cr√©er le mirror condition manuellement");
    console.log("=".repeat(50));

    // Nous devons simuler ce que fait le syst√®me automatique
    const mirrorKeys = [
      // Le mirror principal avec l'ID exact de la condition
      `__mirror_condition_${conditionId}`,
      // Le mirror avec le label du node
      `__mirror_condition_${node.label}`,
      // L'ID exact que le syst√®me cherche
      conditionId,
      // L'exposedKey
      `15314ca9-6246-4e25-b1a8-18b33c208f9a`
    ];

    console.log("üéØ Cl√©s de mirror √† cr√©er dans FormData:");
    mirrorKeys.forEach(key => {
      console.log(`   FormData["${key}"] = true`);
    });

    // 5. Identifier pourquoi le syst√®me ne cr√©e pas le mirror automatiquement
    console.log("\nüîç POURQUOI LE MIRROR N'EST PAS CR√â√â:");
    console.log("=".repeat(40));
    console.log("Dans les logs, on voit:");
    console.log("  üîÄ [MIRROR][CONDITION_CREATE] {..., conditionId: '10bfb6d2-67ae-49a8-8d49-fc6dafa3f74e', ...}");
    console.log("Mais AUCUNE ligne pour notre condition 15314ca9-6246-4e25-b1a8-18b33c208f9a");
    console.log("");
    console.log("Cela signifie que le syst√®me ne voit pas notre condition comme");
    console.log("√©tant li√©e √† un node dans le syst√®me TBL principal.");

    // 6. Solution alternative: Modifier la structure pour que le mirror soit cr√©√©
    console.log("\nüí° SOLUTION ALTERNATIVE:");
    console.log("=".repeat(30));
    console.log("Au lieu de forcer FormData, modifier la structure pour que");
    console.log("le syst√®me cr√©e automatiquement le mirror condition.");

    // V√©rifier s'il y a une formule ou condition li√©e au node
    const nodeData = await prisma.treeBranchLeafNode.findUnique({
      where: { id: nodeId },
      include: {
        TreeBranchLeafNodeFormula: true,
        TreeBranchLeafNodeCondition: true,
        TreeBranchLeafNodeVariable: true
      }
    });

    console.log("\nüìä ANALYSE DU NODE:");
    console.log("=".repeat(25));
    console.log(`Node: ${nodeData.label}`);
    console.log(`Formules li√©es: ${nodeData.TreeBranchLeafNodeFormula?.length || 0}`);
    console.log(`Conditions li√©es: ${nodeData.TreeBranchLeafNodeCondition?.length || 0}`);
    console.log(`Variables li√©es: ${nodeData.TreeBranchLeafNodeVariable?.length || 0}`);

    if (nodeData.TreeBranchLeafNodeCondition?.length === 0) {
      console.log("\nüéØ SOLUTION TROUV√âE:");
      console.log("=".repeat(20));
      console.log("Le node n'a pas de condition directement li√©e!");
      console.log("Il faut cr√©er l'association condition -> node pour que");
      console.log("le syst√®me de mirror automatique fonctionne.");

      // Cr√©er l'association si elle n'existe pas
      console.log("\nüîß Cr√©ation de l'association condition -> node...");
      
      // Option 1: Mettre la condition avec le m√™me ID que le node
      // Option 2: Cr√©er une vraie association dans la base
      
      console.log("√âTAPE SUIVANTE: Associer la condition au node dans le syst√®me TBL");
    }

  } catch (error) {
    console.error("‚ùå Erreur:", error);
  } finally {
    await prisma.$disconnect();
  }
}

addConditionToMirrorSystem();