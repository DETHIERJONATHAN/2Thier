const { PrismaClient } = require('@prisma/client');
const { randomUUID } = require('crypto');

async function testerActivationAutomatique() {
  const prisma = new PrismaClient();

  try {
    console.log('üß™ TEST ACTIVATION AUTOMATIQUE DES √âL√âMENTS CR√â√âS');
    console.log('================================================');

    // 1. Cr√©er un n≈ìud de test
    const nodeTest = await prisma.treeBranchLeafNode.create({
      data: {
        id: randomUUID(),
        label: 'N≈ìud Test Activation',
        type: 'leaf_text',
        organizationId: null,
        TreeBranchLeafTree: {
          create: {
            id: randomUUID(),
            name: 'Arbre Test Activation',
            organizationId: null
          }
        }
      },
      include: {
        TreeBranchLeafTree: true
      }
    });

    console.log(`‚úÖ N≈ìud de test cr√©√©: ${nodeTest.id}`);

    // 2. Test : Cr√©er une formule via l'API (simuler)
    const formuleTest = await prisma.treeBranchLeafNodeFormula.create({
      data: {
        id: randomUUID(),
        nodeId: nodeTest.id,
        organizationId: null,
        name: 'Formule Test Auto',
        tokens: [],
        description: 'Test activation automatique'
      }
    });

    // Simuler l'activation automatique (comme dans notre correction)
    await prisma.treeBranchLeafNode.update({
      where: { id: nodeTest.id },
      data: { 
        hasFormula: true,
        formula_activeId: formuleTest.id
      }
    });

    console.log(`‚úÖ Formule cr√©√©e et activ√©e automatiquement: ${formuleTest.id}`);

    // 3. Test : Cr√©er une condition via l'API (simuler)
    const conditionTest = await prisma.treeBranchLeafNodeCondition.create({
      data: {
        id: randomUUID(),
        nodeId: nodeTest.id,
        organizationId: null,
        name: 'Condition Test Auto',
        conditionSet: [],
        description: 'Test activation automatique'
      }
    });

    // Simuler l'activation automatique (comme dans notre correction)
    await prisma.treeBranchLeafNode.update({
      where: { id: nodeTest.id },
      data: { 
        hasCondition: true,
        condition_activeId: conditionTest.id
      }
    });

    console.log(`‚úÖ Condition cr√©√©e et activ√©e automatiquement: ${conditionTest.id}`);

    // 4. Test : Cr√©er des donn√©es (comme existant)
    await prisma.treeBranchLeafNode.update({
      where: { id: nodeTest.id },
      data: { hasData: true }
    });

    console.log(`‚úÖ Donn√©es activ√©es automatiquement`);

    // 5. V√©rification finale
    const nodeComplet = await prisma.treeBranchLeafNode.findFirst({
      where: { id: nodeTest.id },
      select: {
        id: true,
        label: true,
        hasData: true,
        hasFormula: true,
        hasCondition: true,
        formula_activeId: true,
        condition_activeId: true
      }
    });

    console.log(`\nüéØ R√âSULTAT FINAL DU TEST:`);
    console.log(`   N≈ìud: ${nodeComplet.label}`);
    console.log(`   hasData: ${nodeComplet.hasData} ${nodeComplet.hasData ? '‚úÖ' : '‚ùå'}`);
    console.log(`   hasFormula: ${nodeComplet.hasFormula} ${nodeComplet.hasFormula ? '‚úÖ' : '‚ùå'}`);
    console.log(`   hasCondition: ${nodeComplet.hasCondition} ${nodeComplet.hasCondition ? '‚úÖ' : '‚ùå'}`);
    console.log(`   formula_activeId: ${nodeComplet.formula_activeId ? '‚úÖ ' + nodeComplet.formula_activeId : '‚ùå null'}`);
    console.log(`   condition_activeId: ${nodeComplet.condition_activeId ? '‚úÖ ' + nodeComplet.condition_activeId : '‚ùå null'}`);

    const toutFonctionne = nodeComplet.hasData && 
                          nodeComplet.hasFormula && 
                          nodeComplet.hasCondition && 
                          nodeComplet.formula_activeId && 
                          nodeComplet.condition_activeId;

    console.log(`\n${toutFonctionne ? 'üéâ' : '‚ùå'} R√âSULTAT: ${toutFonctionne ? 'TOUS LES √âL√âMENTS SONT ACTIV√âS AUTOMATIQUEMENT !' : 'IL Y A ENCORE DES PROBL√àMES'}`);

    // 6. Nettoyage
    console.log(`\nüßπ NETTOYAGE...`);
    await prisma.treeBranchLeafNode.delete({ where: { id: nodeTest.id } });
    await prisma.treeBranchLeafTree.delete({ where: { id: nodeTest.TreeBranchLeafTree.id } });
    console.log(`‚úÖ Nettoyage termin√©`);

    if (toutFonctionne) {
      console.log(`\nüöÄ MAINTENANT, CR√âER DE NOUVEAUX √âL√âMENTS VA LES ACTIVER AUTOMATIQUEMENT !`);
      console.log(`   - Nouvelles formules: hasFormula: true + formula_activeId automatique`);
      console.log(`   - Nouvelles conditions: hasCondition: true + condition_activeId automatique`);
      console.log(`   - Nouvelles donn√©es: hasData: true automatique (d√©j√† existant)`);
    }

  } catch (error) {
    console.error('Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testerActivationAutomatique();